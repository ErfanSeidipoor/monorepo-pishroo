/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n  query getCitiesAdminAutoComplete(\n    $getCitiesAdminArgs: GetCitiesAdminArgsGQL!\n  ) {\n    getCitiesAdmin(\n      getCitiesAdminArgs: $getCitiesAdminArgs\n      paginationArgs: { limit: 30, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n": types.GetCitiesAdminAutoCompleteDocument,
    "\n  query getCategoriesAdminAutoCompleteMulti(\n    $getCategoriesAdminArgs: GetCategoriesAdminArgsGQL!\n  ) {\n    getCategoriesAdmin(\n      getCategoriesAdminArgs: $getCategoriesAdminArgs\n      paginationArgs: { limit: 500, page: 1 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n": types.GetCategoriesAdminAutoCompleteMultiDocument,
    "\n  query getColorsAdminAutoCompleteMulti(\n    $getColorsAdminArgs: GetColorsAdminArgsGQL!\n  ) {\n    getColorsAdmin(\n      getColorsAdminArgs: $getColorsAdminArgs\n      paginationArgs: { limit: 300, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        value\n      }\n    }\n  }\n": types.GetColorsAdminAutoCompleteMultiDocument,
    "\n  query getCustomersAdminAutoCompleteMulti(\n    $getCustomersAdminArgs: GetCustomersAdminArgsGQL!\n  ) {\n    getCustomersAdmin(\n      getCustomersAdminArgs: $getCustomersAdminArgs\n      paginationArgs: { limit: 300, page: 1 }\n    ) {\n      edges {\n        id\n        firstName\n        lastName\n        jobTitle\n      }\n    }\n  }\n": types.GetCustomersAdminAutoCompleteMultiDocument,
    "\n  query getProvincesAdminAutoCompleteMulti(\n    $getProvincesAdminArgs: GetProvincesAdminArgsGQL!\n  ) {\n    getProvincesAdmin(\n      getProvincesAdminArgs: $getProvincesAdminArgs\n      paginationArgs: { limit: 300, page: 1 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n": types.GetProvincesAdminAutoCompleteMultiDocument,
    "\n  query getProducersAdminAutoComplete(\n    $getProducersAdminArgs: GetProducersAdminArgsGQL!\n  ) {\n    getProducersAdmin(\n      getProducersAdminArgs: $getProducersAdminArgs\n      paginationArgs: { limit: 30, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        city {\n          name\n          id\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetProducersAdminAutoCompleteDocument,
    "\n  query getPropertiesAdminAutoComplete(\n    $getPropertiesAdminArgs: GetPropertiesAdminArgsGQL!\n  ) {\n    getPropertiesAdmin(\n      getPropertiesAdminArgs: $getPropertiesAdminArgs\n      paginationArgs: { limit: 3000, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        unit\n        isActive\n      }\n    }\n  }\n": types.GetPropertiesAdminAutoCompleteDocument,
    "\n  query getProvincesAdminAutoComplete(\n    $getProvincesAdminArgs: GetProvincesAdminArgsGQL!\n  ) {\n    getProvincesAdmin(\n      getProvincesAdminArgs: $getProvincesAdminArgs\n      paginationArgs: { limit: 30, page: 1 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n": types.GetProvincesAdminAutoCompleteDocument,
    "\n  query getTransportersAdminAutoComplete(\n    $getTransportersAdminArgs: GetTransportersAdminArgsGQL!\n  ) {\n    getTransportersAdmin(\n      getTransportersAdminArgs: $getTransportersAdminArgs\n      paginationArgs: { limit: 30, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        city {\n          name\n          id\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetTransportersAdminAutoCompleteDocument,
    "\n  query getUsersAdminAutoComplete($getUsersAdminArgs: GetUsersAdminArgsGQL!) {\n    getUsersAdmin(\n      getUsersAdminArgs: $getUsersAdminArgs\n      paginationArgs: { limit: 300, page: 1 }\n    ) {\n      edges {\n        id\n        username\n        firstName\n        lastName\n      }\n    }\n  }\n": types.GetUsersAdminAutoCompleteDocument,
    "\n  mutation removeImageAdmin($removeImageAdmin: RemoveImageAdminInputsGQL!) {\n    removeImageAdmin(removeImageAdmin: $removeImageAdmin) {\n      id\n      filename\n    }\n  }\n": types.RemoveImageAdminDocument,
    "\n  mutation uploadFile($file: Upload!) {\n    uploadFile(file: $file) {\n      id\n      path\n      filename\n    }\n  }\n": types.UploadFileDocument,
    "\n  query getFileByIdAdmin($fileId: String!) {\n    getFileByIdAdmin(fileId: $fileId) {\n      id\n      filename\n    }\n  }\n": types.GetFileByIdAdminDocument,
    "\n  query logoutAdmin {\n    logoutAdmin {\n      id\n    }\n  }\n": types.LogoutAdminDocument,
    "\n  query getCategoriesAdmin(\n    $getCategoriesAdminArgs: GetCategoriesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getCategoriesAdmin(\n      getCategoriesAdminArgs: $getCategoriesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        name\n        isActive\n      }\n    }\n  }\n": types.GetCategoriesAdminDocument,
    "\n  mutation updateCategoryActivationAdmin(\n    $updateCategoryActivationAdminInputs: UpdateCategoryActivationAdminInputsGQL!\n  ) {\n    updateCategoryActivationAdmin(\n      updateCategoryActivationAdminInputs: $updateCategoryActivationAdminInputs\n    ) {\n      id\n      name\n      isActive\n    }\n  }\n": types.UpdateCategoryActivationAdminDocument,
    "\n  mutation createCategoryAdmin(\n    $createCategoryAdminInputs: CreateCategoryAdminInputsGQL!\n  ) {\n    createCategoryAdmin(createCategoryAdminInputs: $createCategoryAdminInputs) {\n      id\n      name\n      isActive\n    }\n  }\n": types.CreateCategoryAdminDocument,
    "\n  mutation updateCategoryAdmin(\n    $updateCategoryAdminInputs: UpdateCategoryAdminInputsGQL!\n  ) {\n    updateCategoryAdmin(updateCategoryAdminInputs: $updateCategoryAdminInputs) {\n      id\n      name\n      isActive\n    }\n  }\n": types.UpdateCategoryAdminDocument,
    "\n  query getCategoryByIdAdmin($categoryId: String!) {\n    getCategoryByIdAdmin(categoryId: $categoryId) {\n      id\n      name\n      isActive\n    }\n  }\n": types.GetCategoryByIdAdminDocument,
    "\n  query getCitiesAdmin(\n    $getCitiesAdminArgs: GetCitiesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getCitiesAdmin(\n      getCitiesAdminArgs: $getCitiesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n": types.GetCitiesAdminDocument,
    "\n  mutation createCityAdmin($createCityAdminInputs: CreateCityAdminInputsGQL!) {\n    createCityAdmin(createCityAdminInputs: $createCityAdminInputs) {\n      id\n      name\n      province {\n        id\n        name\n      }\n    }\n  }\n": types.CreateCityAdminDocument,
    "\n  mutation updateCityAdmin($updateCityAdminInputs: UpdateCityAdminInputsGQL!) {\n    updateCityAdmin(updateCityAdminInputs: $updateCityAdminInputs) {\n      id\n      name\n      provinceId\n      province {\n        name\n        id\n      }\n    }\n  }\n": types.UpdateCityAdminDocument,
    "\n  query getCityByIdAdmin($cityId: String!) {\n    getCityByIdAdmin(cityId: $cityId) {\n      id\n      name\n      provinceId\n      province {\n        name\n        id\n      }\n    }\n  }\n": types.GetCityByIdAdminDocument,
    "\n  query getCustomersAdmin(\n    $getCustomersAdminArgs: GetCustomersAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getCustomersAdmin(\n      getCustomersAdminArgs: $getCustomersAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        firstName\n        lastName\n        email\n        jobTitle\n        phone\n        officePhone\n        isActive\n        cityId\n        city {\n          id\n          name\n          province {\n            name\n            id\n          }\n        }\n      }\n    }\n  }\n": types.GetCustomersAdminDocument,
    "\n  mutation updateCustomerActivationAdmin(\n    $updateCustomerActivationAdmin: UpdateCustomerActivationAdminInputsGQL!\n  ) {\n    updateCustomerActivationAdmin(\n      updateCustomerActivationAdmin: $updateCustomerActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n": types.UpdateCustomerActivationAdminDocument,
    "\n  mutation createCustomerAdmin(\n    $createCustomerAdminInputs: CreateCustomerAdminInputsGQL!\n  ) {\n    createCustomerAdmin(createCustomerAdminInputs: $createCustomerAdminInputs) {\n      id\n      firstName\n      lastName\n      email\n      jobTitle\n      phone\n      officePhone\n      isActive\n    }\n  }\n": types.CreateCustomerAdminDocument,
    "\n  mutation updateCustomerAdmin(\n    $updateCustomerAdminInputs: UpdateCustomerAdminInputsGQL!\n  ) {\n    updateCustomerAdmin(updateCustomerAdminInputs: $updateCustomerAdminInputs) {\n      id\n      firstName\n      lastName\n      email\n      jobTitle\n      phone\n      officePhone\n      isActive\n      cityId\n      city {\n        name\n        id\n        province {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.UpdateCustomerAdminDocument,
    "\n  query getCustomerByIdAdmin($customerId: String!) {\n    getCustomerByIdAdmin(customerId: $customerId) {\n      id\n      firstName\n      lastName\n      email\n      jobTitle\n      phone\n      officePhone\n      isActive\n      cityId\n      city {\n        name\n        id\n        province {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetCustomerByIdAdminDocument,
    "\n  query getMessagesAdmin(\n    $getMessagesAdminArgs: GetMessagesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getMessagesAdmin(\n      getMessagesAdminArgs: $getMessagesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        text\n        count\n        createdAt\n        updatedAt\n        deletedAt\n        isActive\n        isSubmited\n        userId\n        user {\n          id\n          username\n          firstName\n          lastName\n        }\n        customerMessages {\n          id\n          customer {\n            id\n            email\n            jobTitle\n            firstName\n            lastName\n            email\n            phone\n            officePhone\n            isActive\n            city {\n              id\n              name\n              province {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetMessagesAdminDocument,
    "\n  mutation updateMessageActivationAdmin(\n    $updateMessageActivationAdminInputs: UpdateMessageActivationAdminInputsGQL!\n  ) {\n    updateMessageActivationAdmin(\n      updateMessageActivationAdminInputs: $updateMessageActivationAdminInputs\n    ) {\n      id\n      isActive\n    }\n  }\n": types.UpdateMessageActivationAdminDocument,
    "\n  mutation createMessageAdmin(\n    $createMessageAdminInputs: CreateMessageAdminInputsGQL!\n  ) {\n    createMessageAdmin(createMessageAdminInputs: $createMessageAdminInputs) {\n      id\n      text\n      count\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      isSubmited\n      userId\n      user {\n        id\n        username\n        firstName\n        lastName\n      }\n      customerMessages {\n        id\n        customer {\n          id\n          email\n          jobTitle\n          firstName\n          lastName\n          email\n          phone\n          officePhone\n          isActive\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": types.CreateMessageAdminDocument,
    "\n  mutation updateMessageAdmin(\n    $updateMessageAdminInputs: UpdateMessageAdminInputsGQL!\n  ) {\n    updateMessageAdmin(updateMessageAdminInputs: $updateMessageAdminInputs) {\n      id\n      text\n      count\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      isSubmited\n      userId\n      user {\n        id\n        username\n        firstName\n        lastName\n      }\n      customerMessages {\n        id\n        customer {\n          id\n          email\n          jobTitle\n          firstName\n          lastName\n          email\n          phone\n          officePhone\n          isActive\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": types.UpdateMessageAdminDocument,
    "\n  query getMessageByIdAdmin($messageId: String!) {\n    getMessageByIdAdmin(messageId: $messageId) {\n      id\n      text\n      count\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      isSubmited\n      userId\n      user {\n        id\n        username\n        firstName\n        lastName\n      }\n      customerMessages {\n        id\n        customer {\n          id\n          email\n          jobTitle\n          firstName\n          lastName\n          email\n          phone\n          officePhone\n          isActive\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetMessageByIdAdminDocument,
    "\n  query getProducerAgentsAdmin(\n    $getProducerAgentsAdminArgs: GetProducerAgentsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProducerAgentsAdmin(\n      getProducerAgentsAdminArgs: $getProducerAgentsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        firstName\n        lastName\n        email\n        phone\n        description\n        isActive\n        producer {\n          id\n          name\n          phone\n          email\n          cityId\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetProducerAgentsAdminDocument,
    "\n  mutation updateProducerAgentActivationAdmin(\n    $updateProducerAgentActivationAdmin: UpdateProducerAgentActivationAdminInputsGQL!\n  ) {\n    updateProducerAgentActivationAdmin(\n      updateProducerAgentActivationAdminInputs: $updateProducerAgentActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n": types.UpdateProducerAgentActivationAdminDocument,
    "\n  mutation createProducerAgentAdmin(\n    $createProducerAgentAdminInputs: CreateProducerAgentAdminInputsGQL!\n  ) {\n    createProducerAgentAdmin(\n      createProducerAgentAdminInputs: $createProducerAgentAdminInputs\n    ) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      producer {\n        id\n        name\n        phone\n        email\n\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.CreateProducerAgentAdminDocument,
    "\n  mutation updateProducerAgentAdmin(\n    $updateProducerAgentAdminInputs: UpdateProducerAgentAdminInputsGQL!\n  ) {\n    updateProducerAgentAdmin(\n      updateProducerAgentAdminInputs: $updateProducerAgentAdminInputs\n    ) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      producer {\n        id\n        name\n        phone\n        email\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.UpdateProducerAgentAdminDocument,
    "\n  query getProducerAgentByIdAdmin($producerAgentId: String!) {\n    getProducerAgentByIdAdmin(producerAgentId: $producerAgentId) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      producer {\n        id\n        name\n        phone\n        email\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetProducerAgentByIdAdminDocument,
    "\n  query getProducersAdmin(\n    $getProducersAdminArgs: GetProducersAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProducersAdmin(\n      getProducersAdminArgs: $getProducersAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        email\n        name\n        description\n        address\n        phone\n        isActive\n        cityId\n        city {\n          id\n          name\n          province {\n            name\n            id\n          }\n        }\n      }\n    }\n  }\n": types.GetProducersAdminDocument,
    "\n  mutation updateProducerActivationAdmin(\n    $updateProducerActivationAdmin: UpdateProducerActivationAdminInputsGQL!\n  ) {\n    updateProducerActivationAdmin(\n      updateProducerActivationAdminInputs: $updateProducerActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n": types.UpdateProducerActivationAdminDocument,
    "\n  mutation createProducerAdmin(\n    $createProducerAdminInputs: CreateProducerAdminInputsGQL!\n  ) {\n    createProducerAdmin(\n      createProducerAdminInputs: $createProducerAdminInputs\n    ) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n": types.CreateProducerAdminDocument,
    "\n  mutation updateProducerAdmin(\n    $updateProducerAdminInputs: UpdateProducerAdminInputsGQL!\n  ) {\n    updateProducerAdmin(\n      updateProducerAdminInputs: $updateProducerAdminInputs\n    ) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n": types.UpdateProducerAdminDocument,
    "\n  query getProducerByIdAdmin($producerId: String!) {\n    getProducerByIdAdmin(producerId: $producerId) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n": types.GetProducerByIdAdminDocument,
    "\n  query getProductByIdAdmin($productId: String!) {\n    getProductByIdAdmin(productId: $productId) {\n      id\n      name\n      slug\n      isActive\n      text\n      productColors {\n        id\n        colorId\n        color {\n          id\n          value\n          name\n        }\n      }\n      productCategories {\n        id\n        categoryId\n        category {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          id\n          filename\n          path\n        }\n      }\n    }\n  }\n": types.GetProductByIdAdminDocument,
    "\n  mutation addCategoriesToProductAdmin(\n    $addCategoriesToProductAdminInputs: AddCategoriesToProductAdminInputsGQL!\n  ) {\n    addCategoriesToProductAdmin(\n      addCategoriesToProductAdminInputs: $addCategoriesToProductAdminInputs\n    ) {\n      id\n      name\n      productCategories {\n        id\n        categoryId\n        category {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.AddCategoriesToProductAdminDocument,
    "\n  mutation addColorsToProductAdmin(\n    $addColorsToProductAdminInputs: AddColorsToProductAdminInputsGQL!\n  ) {\n    addColorsToProductAdmin(\n      addColorsToProductAdminInputs: $addColorsToProductAdminInputs\n    ) {\n      id\n      name\n      productColors {\n        id\n        colorId\n        color {\n          id\n          value\n          name\n        }\n      }\n    }\n  }\n": types.AddColorsToProductAdminDocument,
    "\n  mutation updateProductAdmin(\n    $updateProductAdminInputs: UpdateProductAdminInputsGQL!\n  ) {\n    updateProductAdmin(updateProductAdminInputs: $updateProductAdminInputs) {\n      slug\n      id\n      name\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      text\n    }\n  }\n": types.UpdateProductAdminDocument,
    "\n  mutation addImageToProductAdmin(\n    $addImageToProductAdmin: AddImageToProductAdminInputsGQL!\n  ) {\n    addImageToProductAdmin(addImageToProductAdmin: $addImageToProductAdmin) {\n      id\n    }\n  }\n": types.AddImageToProductAdminDocument,
    "\n  mutation updatePropertyOfProductAdmin(\n    $updatePropertyOfProductAdminInputs: UpdatePropertyOfProductAdminInputsGQL!\n  ) {\n    updatePropertyOfProductAdmin(\n      updatePropertyOfProductAdminInputs: $updatePropertyOfProductAdminInputs\n    ) {\n      id\n      value\n      property {\n        id\n        name\n        unit\n        isActive\n      }\n    }\n  }\n": types.UpdatePropertyOfProductAdminDocument,
    "\n  query getProductPropertyByIdAdmin($productPropertyId: String!) {\n    getProductPropertyByIdAdmin(productPropertyId: $productPropertyId) {\n      id\n      value\n      property {\n        id\n        name\n        unit\n        isActive\n      }\n    }\n  }\n": types.GetProductPropertyByIdAdminDocument,
    "\n  query getProductPropertiesAdmin(\n    $getProductPropertiesAdminArgs: GetProductPropertiesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProductPropertiesAdmin(\n      getProductPropertiesAdminArgs: $getProductPropertiesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        value\n        property {\n          id\n          name\n          unit\n          isActive\n        }\n      }\n    }\n  }\n": types.GetProductPropertiesAdminDocument,
    "\n  mutation removePropertyFromProductAdminInputs(\n    $removePropertyFromProductAdminInputs: RemovePropertyFromProductAdminInputsGQL!\n  ) {\n    removePropertyFromProductAdmin(\n      removePropertyFromProductAdminInputs: $removePropertyFromProductAdminInputs\n    ) {\n      id\n      isActive\n    }\n  }\n": types.RemovePropertyFromProductAdminInputsDocument,
    "\n  mutation addPropertyToProductAdminInputs(\n    $addPropertyToProductAdminInputs: AddPropertyToProductAdminInputsGQL!\n  ) {\n    addPropertyToProductAdmin(\n      addPropertyToProductAdminInputs: $addPropertyToProductAdminInputs\n    ) {\n      id\n      value\n    }\n  }\n": types.AddPropertyToProductAdminInputsDocument,
    "\n  mutation updateProductReviewAdmin(\n    $updateProductReviewAdminInputs: UpdateProductReviewAdminInputsGQL!\n  ) {\n    updateProductReviewAdmin(\n      updateProductReviewAdminInputs: $updateProductReviewAdminInputs\n    ) {\n      id\n      createdAt\n      reviewer\n      text\n      productId\n      isActive\n      product {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n": types.UpdateProductReviewAdminDocument,
    "\n  query getProductReviewByIdAdmin($productReviewId: String!) {\n    getProductReviewByIdAdmin(productReviewId: $productReviewId) {\n      id\n      createdAt\n      reviewer\n      text\n      productId\n      isActive\n      product {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n": types.GetProductReviewByIdAdminDocument,
    "\n  query getProductReviewsAdmin(\n    $getProductReviewsAdminArgs: GetProductReviewsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProductReviewsAdmin(\n      getProductReviewsAdminArgs: $getProductReviewsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        reviewer\n        text\n        text\n        productId\n        product {\n          name\n          id\n        }\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n": types.GetProductReviewsAdminDocument,
    "\n  mutation deleteProductReviewAdmin(\n    $deleteProductReviewAdmin: DeleteProductReviewAdminInputsGQL!\n  ) {\n    deleteProductReviewAdmin(\n      deleteProductReviewAdminInputs: $deleteProductReviewAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n": types.DeleteProductReviewAdminDocument,
    "\n  mutation createProductReviewAdmin(\n    $createProductReviewAdminInputs: CreateProductReviewAdminInputsGQL!\n  ) {\n    createProductReviewAdmin(\n      createProductReviewAdminInputs: $createProductReviewAdminInputs\n    ) {\n      id\n      createdAt\n      reviewer\n      text\n      product {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n": types.CreateProductReviewAdminDocument,
    "\n  query getProductsAdmin(\n    $getProductsAdminArgs: GetProductsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProductsAdmin(\n      getProductsAdminArgs: $getProductsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        slug\n        id\n        name\n        isActive\n        createdAt\n        updatedAt\n        deletedAt\n        text\n        productProperties {\n          id\n          value\n          property {\n            name\n            unit\n          }\n        }\n        fileUses {\n          id\n          status\n          type\n          isPublic\n          file {\n            filename\n            size\n            id\n          }\n        }\n      }\n    }\n  }\n": types.GetProductsAdminDocument,
    "\n  mutation updateProductActivationAdmin(\n    $updateProductActivationAdmin: UpdateProductActivationAdminInputsGQL!\n  ) {\n    updateProductActivationAdmin(\n      updateProductActivationAdmin: $updateProductActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n": types.UpdateProductActivationAdminDocument,
    "\n  mutation createProductAdmin(\n    $createProductAdminInputs: CreateProductAdminInputsGQL!\n  ) {\n    createProductAdmin(createProductAdminInputs: $createProductAdminInputs) {\n      slug\n      id\n      name\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      text\n    }\n  }\n": types.CreateProductAdminDocument,
    "\n  query getProjectByIdAdmin($projectId: String!) {\n    getProjectByIdAdmin(projectId: $projectId) {\n      id\n      createdAt\n      name\n      slug\n      isActive\n      description\n      lat\n      long\n      cityId\n      city {\n        id\n        name\n        province {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          filename\n          id\n        }\n        id\n      }\n    }\n  }\n": types.GetProjectByIdAdminDocument,
    "\n  mutation updateProjectAdmin(\n    $updateProjectAdminInputs: UpdateProjectAdminInputsGQL!\n  ) {\n    updateProjectAdmin(updateProjectAdminInputs: $updateProjectAdminInputs) {\n      id\n      createdAt\n      name\n      slug\n      isActive\n      description\n      lat\n      long\n      cityId\n      city {\n        id\n        name\n        province {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          filename\n          id\n        }\n        id\n      }\n    }\n  }\n": types.UpdateProjectAdminDocument,
    "\n  mutation addImageToProjectAdmin(\n    $addImageToProjectAdminInputs: AddImageToProjectAdminInputsGQL!\n  ) {\n    addImageToProjectAdmin(\n      addImageToProjectAdminInputs: $addImageToProjectAdminInputs\n    ) {\n      id\n    }\n  }\n": types.AddImageToProjectAdminDocument,
    "\n  mutation updateProjectReviewAdmin(\n    $updateProjectReviewAdminInputs: UpdateProjectReviewAdminInputsGQL!\n  ) {\n    updateProjectReviewAdmin(\n      updateProjectReviewAdminInputs: $updateProjectReviewAdminInputs\n    ) {\n      id\n      createdAt\n      reviewer\n      text\n      projectId\n      isActive\n      project {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n": types.UpdateProjectReviewAdminDocument,
    "\n  query getProjectReviewByIdAdmin($projectReviewId: String!) {\n    getProjectReviewByIdAdmin(projectReviewId: $projectReviewId) {\n      id\n      createdAt\n      reviewer\n      text\n      projectId\n      isActive\n      project {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n": types.GetProjectReviewByIdAdminDocument,
    "\n  query getProjectReviewsAdmin(\n    $getProjectReviewsAdminArgs: GetProjectReviewsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProjectReviewsAdmin(\n      getProjectReviewsAdminArgs: $getProjectReviewsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        reviewer\n        text\n        text\n        projectId\n        project {\n          name\n          id\n        }\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n": types.GetProjectReviewsAdminDocument,
    "\n  mutation deleteProjectReviewAdmin(\n    $deleteProjectReviewAdmin: DeleteProjectReviewAdminInputsGQL!\n  ) {\n    deleteProjectReviewAdmin(\n      deleteProjectReviewAdminInputs: $deleteProjectReviewAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n": types.DeleteProjectReviewAdminDocument,
    "\n  mutation createProjectReviewAdmin(\n    $createProjectReviewAdminInputs: CreateProjectReviewAdminInputsGQL!\n  ) {\n    createProjectReviewAdmin(\n      createProjectReviewAdminInputs: $createProjectReviewAdminInputs\n    ) {\n      id\n      createdAt\n      reviewer\n      text\n      project {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n": types.CreateProjectReviewAdminDocument,
    "\n  query getProjectsAdmin(\n    $getProjectsAdminArgs: GetProjectsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProjectsAdmin(\n      getProjectsAdminArgs: $getProjectsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        name\n        slug\n        isActive\n        description\n        lat\n        long\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n        fileUses {\n          file {\n            filename\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n": types.GetProjectsAdminDocument,
    "\n  mutation updateProjectActivationAdmin(\n    $updateProjectActivationAdmin: UpdateProjectActivationAdminInputsGQL!\n  ) {\n    updateProjectActivationAdmin(\n      updateProjectActivationAdminInputs: $updateProjectActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n": types.UpdateProjectActivationAdminDocument,
    "\n  mutation createProjectAdmin(\n    $createProjectAdminInputs: CreateProjectAdminInputsGQL!\n  ) {\n    createProjectAdmin(createProjectAdminInputs: $createProjectAdminInputs) {\n      id\n      createdAt\n      name\n      slug\n      isActive\n      description\n      lat\n      long\n      cityId\n      city {\n        id\n        name\n        province {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          filename\n          id\n        }\n        id\n      }\n    }\n  }\n": types.CreateProjectAdminDocument,
    "\n  query getPropertiesAdmin(\n    $getPropertiesAdminArgs: GetPropertiesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getPropertiesAdmin(\n      getPropertiesAdminArgs: $getPropertiesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        name\n        unit\n        isActive\n      }\n    }\n  }\n": types.GetPropertiesAdminDocument,
    "\n  mutation updatePropertyActivationAdmin(\n    $updatePropertyActivationAdminInputs: UpdatePropertyActivationAdminInputsGQL!\n  ) {\n    updatePropertyActivationAdmin(\n      updatePropertyActivationAdminInputs: $updatePropertyActivationAdminInputs\n    ) {\n      id\n      name\n      unit\n      isActive\n    }\n  }\n": types.UpdatePropertyActivationAdminDocument,
    "\n  mutation createPropertyAdmin(\n    $createPropertyAdminInputs: CreatePropertyAdminInputsGQL!\n  ) {\n    createPropertyAdmin(createPropertyAdminInputs: $createPropertyAdminInputs) {\n      id\n      name\n      unit\n      isActive\n    }\n  }\n": types.CreatePropertyAdminDocument,
    "\n  mutation updatePropertyAdmin(\n    $updatePropertyAdminInputs: UpdatePropertyAdminInputsGQL!\n  ) {\n    updatePropertyAdmin(updatePropertyAdminInputs: $updatePropertyAdminInputs) {\n      id\n      name\n      unit\n      isActive\n    }\n  }\n": types.UpdatePropertyAdminDocument,
    "\n  query getPropertyByIdAdmin($propertyId: String!) {\n    getPropertyByIdAdmin(propertyId: $propertyId) {\n      id\n      name\n      unit\n      isActive\n    }\n  }\n": types.GetPropertyByIdAdminDocument,
    "\n  query getProvincesAdmin(\n    $getProvincesAdminArgs: GetProvincesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProvincesAdmin(\n      getProvincesAdminArgs: $getProvincesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        name\n      }\n    }\n  }\n": types.GetProvincesAdminDocument,
    "\n  mutation createProvinceAdmin(\n    $createProvinceAdminInputs: CreateProvinceAdminInputsGQL!\n  ) {\n    createProvinceAdmin(createProvinceAdminInputs: $createProvinceAdminInputs) {\n      id\n      name\n    }\n  }\n": types.CreateProvinceAdminDocument,
    "\n  mutation updateProvinceAdmin(\n    $updateProvinceAdminInputs: UpdateProvinceAdminInputsGQL!\n  ) {\n    updateProvinceAdmin(updateProvinceAdminInputs: $updateProvinceAdminInputs) {\n      id\n      name\n    }\n  }\n": types.UpdateProvinceAdminDocument,
    "\n  query getProvinceByIdAdmin($provinceId: String!) {\n    getProvinceByIdAdmin(provinceId: $provinceId) {\n      id\n      name\n    }\n  }\n": types.GetProvinceByIdAdminDocument,
    "\n  query getTransporterAgentsAdmin(\n    $getTransporterAgentsAdminArgs: GetTransporterAgentsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getTransporterAgentsAdmin(\n      getTransporterAgentsAdminArgs: $getTransporterAgentsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        firstName\n        lastName\n        email\n        phone\n        description\n        isActive\n        transporter {\n          id\n          name\n          phone\n          email\n          cityId\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetTransporterAgentsAdminDocument,
    "\n  mutation updateTransporterAgentActivationAdmin(\n    $updateTransporterAgentActivationAdmin: UpdateTransporterAgentActivationAdminInputsGQL!\n  ) {\n    updateTransporterAgentActivationAdmin(\n      updateTransporterAgentActivationAdminInputs: $updateTransporterAgentActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n": types.UpdateTransporterAgentActivationAdminDocument,
    "\n  mutation createTransporterAgentAdmin(\n    $createTransporterAgentAdminInputs: CreateTransporterAgentAdminInputsGQL!\n  ) {\n    createTransporterAgentAdmin(\n      createTransporterAgentAdminInputs: $createTransporterAgentAdminInputs\n    ) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      transporter {\n        id\n        name\n        phone\n        email\n\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.CreateTransporterAgentAdminDocument,
    "\n  mutation updateTransporterAgentAdmin(\n    $updateTransporterAgentAdminInputs: UpdateTransporterAgentAdminInputsGQL!\n  ) {\n    updateTransporterAgentAdmin(\n      updateTransporterAgentAdminInputs: $updateTransporterAgentAdminInputs\n    ) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      transporter {\n        id\n        name\n        phone\n        email\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.UpdateTransporterAgentAdminDocument,
    "\n  query getTransporterAgentByIdAdmin($transporterAgentId: String!) {\n    getTransporterAgentByIdAdmin(transporterAgentId: $transporterAgentId) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      transporter {\n        id\n        name\n        phone\n        email\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetTransporterAgentByIdAdminDocument,
    "\n  query getTransportersAdmin(\n    $getTransportersAdminArgs: GetTransportersAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getTransportersAdmin(\n      getTransportersAdminArgs: $getTransportersAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        email\n        name\n        description\n        address\n        phone\n        isActive\n        cityId\n        city {\n          id\n          name\n          province {\n            name\n            id\n          }\n        }\n      }\n    }\n  }\n": types.GetTransportersAdminDocument,
    "\n  mutation updateTransporterActivationAdmin(\n    $updateTransporterActivationAdmin: UpdateTransporterActivationAdminInputsGQL!\n  ) {\n    updateTransporterActivationAdmin(\n      updateTransporterActivationAdminInputs: $updateTransporterActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n": types.UpdateTransporterActivationAdminDocument,
    "\n  mutation createTransporterAdmin(\n    $createTransporterAdminInputs: CreateTransporterAdminInputsGQL!\n  ) {\n    createTransporterAdmin(\n      createTransporterAdminInputs: $createTransporterAdminInputs\n    ) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n": types.CreateTransporterAdminDocument,
    "\n  mutation updateTransporterAdmin(\n    $updateTransporterAdminInputs: UpdateTransporterAdminInputsGQL!\n  ) {\n    updateTransporterAdmin(\n      updateTransporterAdminInputs: $updateTransporterAdminInputs\n    ) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n": types.UpdateTransporterAdminDocument,
    "\n  query getTransporterByIdAdmin($transporterId: String!) {\n    getTransporterByIdAdmin(transporterId: $transporterId) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n": types.GetTransporterByIdAdminDocument,
    "\n  mutation updateUserAdmin($updateUserAdminInputs: UpdateUserAdminInputsGQL!) {\n    updateUserAdmin(updateUserAdminInputs: $updateUserAdminInputs) {\n      id\n      createdAt\n      username\n      firstName\n      lastName\n      email\n      phone\n      roles\n      isActive\n    }\n  }\n": types.UpdateUserAdminDocument,
    "\n  mutation updateUserProvincesAdmin(\n    $updateUserProvincesAdminInputs: UpdateUserProvincesAdminInputsGQL!\n  ) {\n    updateUserProvincesAdmin(\n      updateUserProvincesAdminInputs: $updateUserProvincesAdminInputs\n    ) {\n      id\n      provinceUsers {\n        id\n        provinceId\n        province {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.UpdateUserProvincesAdminDocument,
    "\n  query getUserByIdAdmin($userId: String!) {\n    getUserByIdAdmin(userId: $userId) {\n      id\n      createdAt\n      updatedAt\n      username\n      firstName\n      lastName\n      email\n      phone\n      roles\n      isActive\n\n      provinceUsers {\n        id\n        provinceId\n        province {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetUserByIdAdminDocument,
    "\n  query getUsersAdmin(\n    $getUsersAdminArgs: GetUsersAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getUsersAdmin(\n      getUsersAdminArgs: $getUsersAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        updatedAt\n        deletedAt\n        username\n        firstName\n        lastName\n        email\n        phone\n        roles\n        isActive\n      }\n    }\n  }\n": types.GetUsersAdminDocument,
    "\n  mutation updateUserActivationAdmin(\n    $updateUserActivationAdmin: UpdateUserActivationAdminInputsGQL!\n  ) {\n    updateUserActivationAdmin(\n      updateUserActivationAdmin: $updateUserActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n": types.UpdateUserActivationAdminDocument,
    "\n  mutation createUserAdmin($createUserAdminInputs: CreateUserAdminInputsGQL!) {\n    createUserAdmin(createUserAdminInputs: $createUserAdminInputs) {\n      id\n      createdAt\n      username\n      firstName\n      lastName\n      email\n      phone\n      roles\n      isActive\n    }\n  }\n": types.CreateUserAdminDocument,
    "\n  query loginAdmin($loginAdminInputs: LoginAdminInputsGQL!) {\n    loginAdmin(loginAdminInputs: $loginAdminInputs) {\n      id\n      lastName\n      firstName\n      createdAt\n      roles\n      username\n    }\n  }\n": types.LoginAdminDocument,
    "\n  query meAdmin {\n    meAdmin {\n      id\n      lastName\n      firstName\n      createdAt\n      roles\n      username\n    }\n  }\n": types.MeAdminDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCitiesAdminAutoComplete(\n    $getCitiesAdminArgs: GetCitiesAdminArgsGQL!\n  ) {\n    getCitiesAdmin(\n      getCitiesAdminArgs: $getCitiesAdminArgs\n      paginationArgs: { limit: 30, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCitiesAdminAutoComplete(\n    $getCitiesAdminArgs: GetCitiesAdminArgsGQL!\n  ) {\n    getCitiesAdmin(\n      getCitiesAdminArgs: $getCitiesAdminArgs\n      paginationArgs: { limit: 30, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCategoriesAdminAutoCompleteMulti(\n    $getCategoriesAdminArgs: GetCategoriesAdminArgsGQL!\n  ) {\n    getCategoriesAdmin(\n      getCategoriesAdminArgs: $getCategoriesAdminArgs\n      paginationArgs: { limit: 500, page: 1 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCategoriesAdminAutoCompleteMulti(\n    $getCategoriesAdminArgs: GetCategoriesAdminArgsGQL!\n  ) {\n    getCategoriesAdmin(\n      getCategoriesAdminArgs: $getCategoriesAdminArgs\n      paginationArgs: { limit: 500, page: 1 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getColorsAdminAutoCompleteMulti(\n    $getColorsAdminArgs: GetColorsAdminArgsGQL!\n  ) {\n    getColorsAdmin(\n      getColorsAdminArgs: $getColorsAdminArgs\n      paginationArgs: { limit: 300, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query getColorsAdminAutoCompleteMulti(\n    $getColorsAdminArgs: GetColorsAdminArgsGQL!\n  ) {\n    getColorsAdmin(\n      getColorsAdminArgs: $getColorsAdminArgs\n      paginationArgs: { limit: 300, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        value\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCustomersAdminAutoCompleteMulti(\n    $getCustomersAdminArgs: GetCustomersAdminArgsGQL!\n  ) {\n    getCustomersAdmin(\n      getCustomersAdminArgs: $getCustomersAdminArgs\n      paginationArgs: { limit: 300, page: 1 }\n    ) {\n      edges {\n        id\n        firstName\n        lastName\n        jobTitle\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCustomersAdminAutoCompleteMulti(\n    $getCustomersAdminArgs: GetCustomersAdminArgsGQL!\n  ) {\n    getCustomersAdmin(\n      getCustomersAdminArgs: $getCustomersAdminArgs\n      paginationArgs: { limit: 300, page: 1 }\n    ) {\n      edges {\n        id\n        firstName\n        lastName\n        jobTitle\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProvincesAdminAutoCompleteMulti(\n    $getProvincesAdminArgs: GetProvincesAdminArgsGQL!\n  ) {\n    getProvincesAdmin(\n      getProvincesAdminArgs: $getProvincesAdminArgs\n      paginationArgs: { limit: 300, page: 1 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProvincesAdminAutoCompleteMulti(\n    $getProvincesAdminArgs: GetProvincesAdminArgsGQL!\n  ) {\n    getProvincesAdmin(\n      getProvincesAdminArgs: $getProvincesAdminArgs\n      paginationArgs: { limit: 300, page: 1 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProducersAdminAutoComplete(\n    $getProducersAdminArgs: GetProducersAdminArgsGQL!\n  ) {\n    getProducersAdmin(\n      getProducersAdminArgs: $getProducersAdminArgs\n      paginationArgs: { limit: 30, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        city {\n          name\n          id\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProducersAdminAutoComplete(\n    $getProducersAdminArgs: GetProducersAdminArgsGQL!\n  ) {\n    getProducersAdmin(\n      getProducersAdminArgs: $getProducersAdminArgs\n      paginationArgs: { limit: 30, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        city {\n          name\n          id\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getPropertiesAdminAutoComplete(\n    $getPropertiesAdminArgs: GetPropertiesAdminArgsGQL!\n  ) {\n    getPropertiesAdmin(\n      getPropertiesAdminArgs: $getPropertiesAdminArgs\n      paginationArgs: { limit: 3000, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        unit\n        isActive\n      }\n    }\n  }\n"): (typeof documents)["\n  query getPropertiesAdminAutoComplete(\n    $getPropertiesAdminArgs: GetPropertiesAdminArgsGQL!\n  ) {\n    getPropertiesAdmin(\n      getPropertiesAdminArgs: $getPropertiesAdminArgs\n      paginationArgs: { limit: 3000, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        unit\n        isActive\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProvincesAdminAutoComplete(\n    $getProvincesAdminArgs: GetProvincesAdminArgsGQL!\n  ) {\n    getProvincesAdmin(\n      getProvincesAdminArgs: $getProvincesAdminArgs\n      paginationArgs: { limit: 30, page: 1 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProvincesAdminAutoComplete(\n    $getProvincesAdminArgs: GetProvincesAdminArgsGQL!\n  ) {\n    getProvincesAdmin(\n      getProvincesAdminArgs: $getProvincesAdminArgs\n      paginationArgs: { limit: 30, page: 1 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getTransportersAdminAutoComplete(\n    $getTransportersAdminArgs: GetTransportersAdminArgsGQL!\n  ) {\n    getTransportersAdmin(\n      getTransportersAdminArgs: $getTransportersAdminArgs\n      paginationArgs: { limit: 30, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        city {\n          name\n          id\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getTransportersAdminAutoComplete(\n    $getTransportersAdminArgs: GetTransportersAdminArgsGQL!\n  ) {\n    getTransportersAdmin(\n      getTransportersAdminArgs: $getTransportersAdminArgs\n      paginationArgs: { limit: 30, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        city {\n          name\n          id\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getUsersAdminAutoComplete($getUsersAdminArgs: GetUsersAdminArgsGQL!) {\n    getUsersAdmin(\n      getUsersAdminArgs: $getUsersAdminArgs\n      paginationArgs: { limit: 300, page: 1 }\n    ) {\n      edges {\n        id\n        username\n        firstName\n        lastName\n      }\n    }\n  }\n"): (typeof documents)["\n  query getUsersAdminAutoComplete($getUsersAdminArgs: GetUsersAdminArgsGQL!) {\n    getUsersAdmin(\n      getUsersAdminArgs: $getUsersAdminArgs\n      paginationArgs: { limit: 300, page: 1 }\n    ) {\n      edges {\n        id\n        username\n        firstName\n        lastName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation removeImageAdmin($removeImageAdmin: RemoveImageAdminInputsGQL!) {\n    removeImageAdmin(removeImageAdmin: $removeImageAdmin) {\n      id\n      filename\n    }\n  }\n"): (typeof documents)["\n  mutation removeImageAdmin($removeImageAdmin: RemoveImageAdminInputsGQL!) {\n    removeImageAdmin(removeImageAdmin: $removeImageAdmin) {\n      id\n      filename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation uploadFile($file: Upload!) {\n    uploadFile(file: $file) {\n      id\n      path\n      filename\n    }\n  }\n"): (typeof documents)["\n  mutation uploadFile($file: Upload!) {\n    uploadFile(file: $file) {\n      id\n      path\n      filename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getFileByIdAdmin($fileId: String!) {\n    getFileByIdAdmin(fileId: $fileId) {\n      id\n      filename\n    }\n  }\n"): (typeof documents)["\n  query getFileByIdAdmin($fileId: String!) {\n    getFileByIdAdmin(fileId: $fileId) {\n      id\n      filename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query logoutAdmin {\n    logoutAdmin {\n      id\n    }\n  }\n"): (typeof documents)["\n  query logoutAdmin {\n    logoutAdmin {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCategoriesAdmin(\n    $getCategoriesAdminArgs: GetCategoriesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getCategoriesAdmin(\n      getCategoriesAdminArgs: $getCategoriesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        name\n        isActive\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCategoriesAdmin(\n    $getCategoriesAdminArgs: GetCategoriesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getCategoriesAdmin(\n      getCategoriesAdminArgs: $getCategoriesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        name\n        isActive\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateCategoryActivationAdmin(\n    $updateCategoryActivationAdminInputs: UpdateCategoryActivationAdminInputsGQL!\n  ) {\n    updateCategoryActivationAdmin(\n      updateCategoryActivationAdminInputs: $updateCategoryActivationAdminInputs\n    ) {\n      id\n      name\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation updateCategoryActivationAdmin(\n    $updateCategoryActivationAdminInputs: UpdateCategoryActivationAdminInputsGQL!\n  ) {\n    updateCategoryActivationAdmin(\n      updateCategoryActivationAdminInputs: $updateCategoryActivationAdminInputs\n    ) {\n      id\n      name\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createCategoryAdmin(\n    $createCategoryAdminInputs: CreateCategoryAdminInputsGQL!\n  ) {\n    createCategoryAdmin(createCategoryAdminInputs: $createCategoryAdminInputs) {\n      id\n      name\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation createCategoryAdmin(\n    $createCategoryAdminInputs: CreateCategoryAdminInputsGQL!\n  ) {\n    createCategoryAdmin(createCategoryAdminInputs: $createCategoryAdminInputs) {\n      id\n      name\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateCategoryAdmin(\n    $updateCategoryAdminInputs: UpdateCategoryAdminInputsGQL!\n  ) {\n    updateCategoryAdmin(updateCategoryAdminInputs: $updateCategoryAdminInputs) {\n      id\n      name\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation updateCategoryAdmin(\n    $updateCategoryAdminInputs: UpdateCategoryAdminInputsGQL!\n  ) {\n    updateCategoryAdmin(updateCategoryAdminInputs: $updateCategoryAdminInputs) {\n      id\n      name\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCategoryByIdAdmin($categoryId: String!) {\n    getCategoryByIdAdmin(categoryId: $categoryId) {\n      id\n      name\n      isActive\n    }\n  }\n"): (typeof documents)["\n  query getCategoryByIdAdmin($categoryId: String!) {\n    getCategoryByIdAdmin(categoryId: $categoryId) {\n      id\n      name\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCitiesAdmin(\n    $getCitiesAdminArgs: GetCitiesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getCitiesAdmin(\n      getCitiesAdminArgs: $getCitiesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCitiesAdmin(\n    $getCitiesAdminArgs: GetCitiesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getCitiesAdmin(\n      getCitiesAdminArgs: $getCitiesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createCityAdmin($createCityAdminInputs: CreateCityAdminInputsGQL!) {\n    createCityAdmin(createCityAdminInputs: $createCityAdminInputs) {\n      id\n      name\n      province {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createCityAdmin($createCityAdminInputs: CreateCityAdminInputsGQL!) {\n    createCityAdmin(createCityAdminInputs: $createCityAdminInputs) {\n      id\n      name\n      province {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateCityAdmin($updateCityAdminInputs: UpdateCityAdminInputsGQL!) {\n    updateCityAdmin(updateCityAdminInputs: $updateCityAdminInputs) {\n      id\n      name\n      provinceId\n      province {\n        name\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCityAdmin($updateCityAdminInputs: UpdateCityAdminInputsGQL!) {\n    updateCityAdmin(updateCityAdminInputs: $updateCityAdminInputs) {\n      id\n      name\n      provinceId\n      province {\n        name\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCityByIdAdmin($cityId: String!) {\n    getCityByIdAdmin(cityId: $cityId) {\n      id\n      name\n      provinceId\n      province {\n        name\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCityByIdAdmin($cityId: String!) {\n    getCityByIdAdmin(cityId: $cityId) {\n      id\n      name\n      provinceId\n      province {\n        name\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCustomersAdmin(\n    $getCustomersAdminArgs: GetCustomersAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getCustomersAdmin(\n      getCustomersAdminArgs: $getCustomersAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        firstName\n        lastName\n        email\n        jobTitle\n        phone\n        officePhone\n        isActive\n        cityId\n        city {\n          id\n          name\n          province {\n            name\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCustomersAdmin(\n    $getCustomersAdminArgs: GetCustomersAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getCustomersAdmin(\n      getCustomersAdminArgs: $getCustomersAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        firstName\n        lastName\n        email\n        jobTitle\n        phone\n        officePhone\n        isActive\n        cityId\n        city {\n          id\n          name\n          province {\n            name\n            id\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateCustomerActivationAdmin(\n    $updateCustomerActivationAdmin: UpdateCustomerActivationAdminInputsGQL!\n  ) {\n    updateCustomerActivationAdmin(\n      updateCustomerActivationAdmin: $updateCustomerActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation updateCustomerActivationAdmin(\n    $updateCustomerActivationAdmin: UpdateCustomerActivationAdminInputsGQL!\n  ) {\n    updateCustomerActivationAdmin(\n      updateCustomerActivationAdmin: $updateCustomerActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createCustomerAdmin(\n    $createCustomerAdminInputs: CreateCustomerAdminInputsGQL!\n  ) {\n    createCustomerAdmin(createCustomerAdminInputs: $createCustomerAdminInputs) {\n      id\n      firstName\n      lastName\n      email\n      jobTitle\n      phone\n      officePhone\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation createCustomerAdmin(\n    $createCustomerAdminInputs: CreateCustomerAdminInputsGQL!\n  ) {\n    createCustomerAdmin(createCustomerAdminInputs: $createCustomerAdminInputs) {\n      id\n      firstName\n      lastName\n      email\n      jobTitle\n      phone\n      officePhone\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateCustomerAdmin(\n    $updateCustomerAdminInputs: UpdateCustomerAdminInputsGQL!\n  ) {\n    updateCustomerAdmin(updateCustomerAdminInputs: $updateCustomerAdminInputs) {\n      id\n      firstName\n      lastName\n      email\n      jobTitle\n      phone\n      officePhone\n      isActive\n      cityId\n      city {\n        name\n        id\n        province {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCustomerAdmin(\n    $updateCustomerAdminInputs: UpdateCustomerAdminInputsGQL!\n  ) {\n    updateCustomerAdmin(updateCustomerAdminInputs: $updateCustomerAdminInputs) {\n      id\n      firstName\n      lastName\n      email\n      jobTitle\n      phone\n      officePhone\n      isActive\n      cityId\n      city {\n        name\n        id\n        province {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCustomerByIdAdmin($customerId: String!) {\n    getCustomerByIdAdmin(customerId: $customerId) {\n      id\n      firstName\n      lastName\n      email\n      jobTitle\n      phone\n      officePhone\n      isActive\n      cityId\n      city {\n        name\n        id\n        province {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCustomerByIdAdmin($customerId: String!) {\n    getCustomerByIdAdmin(customerId: $customerId) {\n      id\n      firstName\n      lastName\n      email\n      jobTitle\n      phone\n      officePhone\n      isActive\n      cityId\n      city {\n        name\n        id\n        province {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getMessagesAdmin(\n    $getMessagesAdminArgs: GetMessagesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getMessagesAdmin(\n      getMessagesAdminArgs: $getMessagesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        text\n        count\n        createdAt\n        updatedAt\n        deletedAt\n        isActive\n        isSubmited\n        userId\n        user {\n          id\n          username\n          firstName\n          lastName\n        }\n        customerMessages {\n          id\n          customer {\n            id\n            email\n            jobTitle\n            firstName\n            lastName\n            email\n            phone\n            officePhone\n            isActive\n            city {\n              id\n              name\n              province {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getMessagesAdmin(\n    $getMessagesAdminArgs: GetMessagesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getMessagesAdmin(\n      getMessagesAdminArgs: $getMessagesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        text\n        count\n        createdAt\n        updatedAt\n        deletedAt\n        isActive\n        isSubmited\n        userId\n        user {\n          id\n          username\n          firstName\n          lastName\n        }\n        customerMessages {\n          id\n          customer {\n            id\n            email\n            jobTitle\n            firstName\n            lastName\n            email\n            phone\n            officePhone\n            isActive\n            city {\n              id\n              name\n              province {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateMessageActivationAdmin(\n    $updateMessageActivationAdminInputs: UpdateMessageActivationAdminInputsGQL!\n  ) {\n    updateMessageActivationAdmin(\n      updateMessageActivationAdminInputs: $updateMessageActivationAdminInputs\n    ) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation updateMessageActivationAdmin(\n    $updateMessageActivationAdminInputs: UpdateMessageActivationAdminInputsGQL!\n  ) {\n    updateMessageActivationAdmin(\n      updateMessageActivationAdminInputs: $updateMessageActivationAdminInputs\n    ) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createMessageAdmin(\n    $createMessageAdminInputs: CreateMessageAdminInputsGQL!\n  ) {\n    createMessageAdmin(createMessageAdminInputs: $createMessageAdminInputs) {\n      id\n      text\n      count\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      isSubmited\n      userId\n      user {\n        id\n        username\n        firstName\n        lastName\n      }\n      customerMessages {\n        id\n        customer {\n          id\n          email\n          jobTitle\n          firstName\n          lastName\n          email\n          phone\n          officePhone\n          isActive\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createMessageAdmin(\n    $createMessageAdminInputs: CreateMessageAdminInputsGQL!\n  ) {\n    createMessageAdmin(createMessageAdminInputs: $createMessageAdminInputs) {\n      id\n      text\n      count\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      isSubmited\n      userId\n      user {\n        id\n        username\n        firstName\n        lastName\n      }\n      customerMessages {\n        id\n        customer {\n          id\n          email\n          jobTitle\n          firstName\n          lastName\n          email\n          phone\n          officePhone\n          isActive\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateMessageAdmin(\n    $updateMessageAdminInputs: UpdateMessageAdminInputsGQL!\n  ) {\n    updateMessageAdmin(updateMessageAdminInputs: $updateMessageAdminInputs) {\n      id\n      text\n      count\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      isSubmited\n      userId\n      user {\n        id\n        username\n        firstName\n        lastName\n      }\n      customerMessages {\n        id\n        customer {\n          id\n          email\n          jobTitle\n          firstName\n          lastName\n          email\n          phone\n          officePhone\n          isActive\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateMessageAdmin(\n    $updateMessageAdminInputs: UpdateMessageAdminInputsGQL!\n  ) {\n    updateMessageAdmin(updateMessageAdminInputs: $updateMessageAdminInputs) {\n      id\n      text\n      count\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      isSubmited\n      userId\n      user {\n        id\n        username\n        firstName\n        lastName\n      }\n      customerMessages {\n        id\n        customer {\n          id\n          email\n          jobTitle\n          firstName\n          lastName\n          email\n          phone\n          officePhone\n          isActive\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getMessageByIdAdmin($messageId: String!) {\n    getMessageByIdAdmin(messageId: $messageId) {\n      id\n      text\n      count\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      isSubmited\n      userId\n      user {\n        id\n        username\n        firstName\n        lastName\n      }\n      customerMessages {\n        id\n        customer {\n          id\n          email\n          jobTitle\n          firstName\n          lastName\n          email\n          phone\n          officePhone\n          isActive\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getMessageByIdAdmin($messageId: String!) {\n    getMessageByIdAdmin(messageId: $messageId) {\n      id\n      text\n      count\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      isSubmited\n      userId\n      user {\n        id\n        username\n        firstName\n        lastName\n      }\n      customerMessages {\n        id\n        customer {\n          id\n          email\n          jobTitle\n          firstName\n          lastName\n          email\n          phone\n          officePhone\n          isActive\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProducerAgentsAdmin(\n    $getProducerAgentsAdminArgs: GetProducerAgentsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProducerAgentsAdmin(\n      getProducerAgentsAdminArgs: $getProducerAgentsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        firstName\n        lastName\n        email\n        phone\n        description\n        isActive\n        producer {\n          id\n          name\n          phone\n          email\n          cityId\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProducerAgentsAdmin(\n    $getProducerAgentsAdminArgs: GetProducerAgentsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProducerAgentsAdmin(\n      getProducerAgentsAdminArgs: $getProducerAgentsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        firstName\n        lastName\n        email\n        phone\n        description\n        isActive\n        producer {\n          id\n          name\n          phone\n          email\n          cityId\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateProducerAgentActivationAdmin(\n    $updateProducerAgentActivationAdmin: UpdateProducerAgentActivationAdminInputsGQL!\n  ) {\n    updateProducerAgentActivationAdmin(\n      updateProducerAgentActivationAdminInputs: $updateProducerAgentActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation updateProducerAgentActivationAdmin(\n    $updateProducerAgentActivationAdmin: UpdateProducerAgentActivationAdminInputsGQL!\n  ) {\n    updateProducerAgentActivationAdmin(\n      updateProducerAgentActivationAdminInputs: $updateProducerAgentActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createProducerAgentAdmin(\n    $createProducerAgentAdminInputs: CreateProducerAgentAdminInputsGQL!\n  ) {\n    createProducerAgentAdmin(\n      createProducerAgentAdminInputs: $createProducerAgentAdminInputs\n    ) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      producer {\n        id\n        name\n        phone\n        email\n\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createProducerAgentAdmin(\n    $createProducerAgentAdminInputs: CreateProducerAgentAdminInputsGQL!\n  ) {\n    createProducerAgentAdmin(\n      createProducerAgentAdminInputs: $createProducerAgentAdminInputs\n    ) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      producer {\n        id\n        name\n        phone\n        email\n\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateProducerAgentAdmin(\n    $updateProducerAgentAdminInputs: UpdateProducerAgentAdminInputsGQL!\n  ) {\n    updateProducerAgentAdmin(\n      updateProducerAgentAdminInputs: $updateProducerAgentAdminInputs\n    ) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      producer {\n        id\n        name\n        phone\n        email\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateProducerAgentAdmin(\n    $updateProducerAgentAdminInputs: UpdateProducerAgentAdminInputsGQL!\n  ) {\n    updateProducerAgentAdmin(\n      updateProducerAgentAdminInputs: $updateProducerAgentAdminInputs\n    ) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      producer {\n        id\n        name\n        phone\n        email\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProducerAgentByIdAdmin($producerAgentId: String!) {\n    getProducerAgentByIdAdmin(producerAgentId: $producerAgentId) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      producer {\n        id\n        name\n        phone\n        email\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProducerAgentByIdAdmin($producerAgentId: String!) {\n    getProducerAgentByIdAdmin(producerAgentId: $producerAgentId) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      producer {\n        id\n        name\n        phone\n        email\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProducersAdmin(\n    $getProducersAdminArgs: GetProducersAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProducersAdmin(\n      getProducersAdminArgs: $getProducersAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        email\n        name\n        description\n        address\n        phone\n        isActive\n        cityId\n        city {\n          id\n          name\n          province {\n            name\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProducersAdmin(\n    $getProducersAdminArgs: GetProducersAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProducersAdmin(\n      getProducersAdminArgs: $getProducersAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        email\n        name\n        description\n        address\n        phone\n        isActive\n        cityId\n        city {\n          id\n          name\n          province {\n            name\n            id\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateProducerActivationAdmin(\n    $updateProducerActivationAdmin: UpdateProducerActivationAdminInputsGQL!\n  ) {\n    updateProducerActivationAdmin(\n      updateProducerActivationAdminInputs: $updateProducerActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation updateProducerActivationAdmin(\n    $updateProducerActivationAdmin: UpdateProducerActivationAdminInputsGQL!\n  ) {\n    updateProducerActivationAdmin(\n      updateProducerActivationAdminInputs: $updateProducerActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createProducerAdmin(\n    $createProducerAdminInputs: CreateProducerAdminInputsGQL!\n  ) {\n    createProducerAdmin(\n      createProducerAdminInputs: $createProducerAdminInputs\n    ) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createProducerAdmin(\n    $createProducerAdminInputs: CreateProducerAdminInputsGQL!\n  ) {\n    createProducerAdmin(\n      createProducerAdminInputs: $createProducerAdminInputs\n    ) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateProducerAdmin(\n    $updateProducerAdminInputs: UpdateProducerAdminInputsGQL!\n  ) {\n    updateProducerAdmin(\n      updateProducerAdminInputs: $updateProducerAdminInputs\n    ) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateProducerAdmin(\n    $updateProducerAdminInputs: UpdateProducerAdminInputsGQL!\n  ) {\n    updateProducerAdmin(\n      updateProducerAdminInputs: $updateProducerAdminInputs\n    ) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProducerByIdAdmin($producerId: String!) {\n    getProducerByIdAdmin(producerId: $producerId) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProducerByIdAdmin($producerId: String!) {\n    getProducerByIdAdmin(producerId: $producerId) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductByIdAdmin($productId: String!) {\n    getProductByIdAdmin(productId: $productId) {\n      id\n      name\n      slug\n      isActive\n      text\n      productColors {\n        id\n        colorId\n        color {\n          id\n          value\n          name\n        }\n      }\n      productCategories {\n        id\n        categoryId\n        category {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          id\n          filename\n          path\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProductByIdAdmin($productId: String!) {\n    getProductByIdAdmin(productId: $productId) {\n      id\n      name\n      slug\n      isActive\n      text\n      productColors {\n        id\n        colorId\n        color {\n          id\n          value\n          name\n        }\n      }\n      productCategories {\n        id\n        categoryId\n        category {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          id\n          filename\n          path\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation addCategoriesToProductAdmin(\n    $addCategoriesToProductAdminInputs: AddCategoriesToProductAdminInputsGQL!\n  ) {\n    addCategoriesToProductAdmin(\n      addCategoriesToProductAdminInputs: $addCategoriesToProductAdminInputs\n    ) {\n      id\n      name\n      productCategories {\n        id\n        categoryId\n        category {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation addCategoriesToProductAdmin(\n    $addCategoriesToProductAdminInputs: AddCategoriesToProductAdminInputsGQL!\n  ) {\n    addCategoriesToProductAdmin(\n      addCategoriesToProductAdminInputs: $addCategoriesToProductAdminInputs\n    ) {\n      id\n      name\n      productCategories {\n        id\n        categoryId\n        category {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation addColorsToProductAdmin(\n    $addColorsToProductAdminInputs: AddColorsToProductAdminInputsGQL!\n  ) {\n    addColorsToProductAdmin(\n      addColorsToProductAdminInputs: $addColorsToProductAdminInputs\n    ) {\n      id\n      name\n      productColors {\n        id\n        colorId\n        color {\n          id\n          value\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation addColorsToProductAdmin(\n    $addColorsToProductAdminInputs: AddColorsToProductAdminInputsGQL!\n  ) {\n    addColorsToProductAdmin(\n      addColorsToProductAdminInputs: $addColorsToProductAdminInputs\n    ) {\n      id\n      name\n      productColors {\n        id\n        colorId\n        color {\n          id\n          value\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateProductAdmin(\n    $updateProductAdminInputs: UpdateProductAdminInputsGQL!\n  ) {\n    updateProductAdmin(updateProductAdminInputs: $updateProductAdminInputs) {\n      slug\n      id\n      name\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      text\n    }\n  }\n"): (typeof documents)["\n  mutation updateProductAdmin(\n    $updateProductAdminInputs: UpdateProductAdminInputsGQL!\n  ) {\n    updateProductAdmin(updateProductAdminInputs: $updateProductAdminInputs) {\n      slug\n      id\n      name\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      text\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation addImageToProductAdmin(\n    $addImageToProductAdmin: AddImageToProductAdminInputsGQL!\n  ) {\n    addImageToProductAdmin(addImageToProductAdmin: $addImageToProductAdmin) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation addImageToProductAdmin(\n    $addImageToProductAdmin: AddImageToProductAdminInputsGQL!\n  ) {\n    addImageToProductAdmin(addImageToProductAdmin: $addImageToProductAdmin) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updatePropertyOfProductAdmin(\n    $updatePropertyOfProductAdminInputs: UpdatePropertyOfProductAdminInputsGQL!\n  ) {\n    updatePropertyOfProductAdmin(\n      updatePropertyOfProductAdminInputs: $updatePropertyOfProductAdminInputs\n    ) {\n      id\n      value\n      property {\n        id\n        name\n        unit\n        isActive\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePropertyOfProductAdmin(\n    $updatePropertyOfProductAdminInputs: UpdatePropertyOfProductAdminInputsGQL!\n  ) {\n    updatePropertyOfProductAdmin(\n      updatePropertyOfProductAdminInputs: $updatePropertyOfProductAdminInputs\n    ) {\n      id\n      value\n      property {\n        id\n        name\n        unit\n        isActive\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductPropertyByIdAdmin($productPropertyId: String!) {\n    getProductPropertyByIdAdmin(productPropertyId: $productPropertyId) {\n      id\n      value\n      property {\n        id\n        name\n        unit\n        isActive\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProductPropertyByIdAdmin($productPropertyId: String!) {\n    getProductPropertyByIdAdmin(productPropertyId: $productPropertyId) {\n      id\n      value\n      property {\n        id\n        name\n        unit\n        isActive\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductPropertiesAdmin(\n    $getProductPropertiesAdminArgs: GetProductPropertiesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProductPropertiesAdmin(\n      getProductPropertiesAdminArgs: $getProductPropertiesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        value\n        property {\n          id\n          name\n          unit\n          isActive\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProductPropertiesAdmin(\n    $getProductPropertiesAdminArgs: GetProductPropertiesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProductPropertiesAdmin(\n      getProductPropertiesAdminArgs: $getProductPropertiesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        value\n        property {\n          id\n          name\n          unit\n          isActive\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation removePropertyFromProductAdminInputs(\n    $removePropertyFromProductAdminInputs: RemovePropertyFromProductAdminInputsGQL!\n  ) {\n    removePropertyFromProductAdmin(\n      removePropertyFromProductAdminInputs: $removePropertyFromProductAdminInputs\n    ) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation removePropertyFromProductAdminInputs(\n    $removePropertyFromProductAdminInputs: RemovePropertyFromProductAdminInputsGQL!\n  ) {\n    removePropertyFromProductAdmin(\n      removePropertyFromProductAdminInputs: $removePropertyFromProductAdminInputs\n    ) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation addPropertyToProductAdminInputs(\n    $addPropertyToProductAdminInputs: AddPropertyToProductAdminInputsGQL!\n  ) {\n    addPropertyToProductAdmin(\n      addPropertyToProductAdminInputs: $addPropertyToProductAdminInputs\n    ) {\n      id\n      value\n    }\n  }\n"): (typeof documents)["\n  mutation addPropertyToProductAdminInputs(\n    $addPropertyToProductAdminInputs: AddPropertyToProductAdminInputsGQL!\n  ) {\n    addPropertyToProductAdmin(\n      addPropertyToProductAdminInputs: $addPropertyToProductAdminInputs\n    ) {\n      id\n      value\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateProductReviewAdmin(\n    $updateProductReviewAdminInputs: UpdateProductReviewAdminInputsGQL!\n  ) {\n    updateProductReviewAdmin(\n      updateProductReviewAdminInputs: $updateProductReviewAdminInputs\n    ) {\n      id\n      createdAt\n      reviewer\n      text\n      productId\n      isActive\n      product {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateProductReviewAdmin(\n    $updateProductReviewAdminInputs: UpdateProductReviewAdminInputsGQL!\n  ) {\n    updateProductReviewAdmin(\n      updateProductReviewAdminInputs: $updateProductReviewAdminInputs\n    ) {\n      id\n      createdAt\n      reviewer\n      text\n      productId\n      isActive\n      product {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductReviewByIdAdmin($productReviewId: String!) {\n    getProductReviewByIdAdmin(productReviewId: $productReviewId) {\n      id\n      createdAt\n      reviewer\n      text\n      productId\n      isActive\n      product {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProductReviewByIdAdmin($productReviewId: String!) {\n    getProductReviewByIdAdmin(productReviewId: $productReviewId) {\n      id\n      createdAt\n      reviewer\n      text\n      productId\n      isActive\n      product {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductReviewsAdmin(\n    $getProductReviewsAdminArgs: GetProductReviewsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProductReviewsAdmin(\n      getProductReviewsAdminArgs: $getProductReviewsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        reviewer\n        text\n        text\n        productId\n        product {\n          name\n          id\n        }\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProductReviewsAdmin(\n    $getProductReviewsAdminArgs: GetProductReviewsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProductReviewsAdmin(\n      getProductReviewsAdminArgs: $getProductReviewsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        reviewer\n        text\n        text\n        productId\n        product {\n          name\n          id\n        }\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation deleteProductReviewAdmin(\n    $deleteProductReviewAdmin: DeleteProductReviewAdminInputsGQL!\n  ) {\n    deleteProductReviewAdmin(\n      deleteProductReviewAdminInputs: $deleteProductReviewAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation deleteProductReviewAdmin(\n    $deleteProductReviewAdmin: DeleteProductReviewAdminInputsGQL!\n  ) {\n    deleteProductReviewAdmin(\n      deleteProductReviewAdminInputs: $deleteProductReviewAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createProductReviewAdmin(\n    $createProductReviewAdminInputs: CreateProductReviewAdminInputsGQL!\n  ) {\n    createProductReviewAdmin(\n      createProductReviewAdminInputs: $createProductReviewAdminInputs\n    ) {\n      id\n      createdAt\n      reviewer\n      text\n      product {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createProductReviewAdmin(\n    $createProductReviewAdminInputs: CreateProductReviewAdminInputsGQL!\n  ) {\n    createProductReviewAdmin(\n      createProductReviewAdminInputs: $createProductReviewAdminInputs\n    ) {\n      id\n      createdAt\n      reviewer\n      text\n      product {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductsAdmin(\n    $getProductsAdminArgs: GetProductsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProductsAdmin(\n      getProductsAdminArgs: $getProductsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        slug\n        id\n        name\n        isActive\n        createdAt\n        updatedAt\n        deletedAt\n        text\n        productProperties {\n          id\n          value\n          property {\n            name\n            unit\n          }\n        }\n        fileUses {\n          id\n          status\n          type\n          isPublic\n          file {\n            filename\n            size\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProductsAdmin(\n    $getProductsAdminArgs: GetProductsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProductsAdmin(\n      getProductsAdminArgs: $getProductsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        slug\n        id\n        name\n        isActive\n        createdAt\n        updatedAt\n        deletedAt\n        text\n        productProperties {\n          id\n          value\n          property {\n            name\n            unit\n          }\n        }\n        fileUses {\n          id\n          status\n          type\n          isPublic\n          file {\n            filename\n            size\n            id\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateProductActivationAdmin(\n    $updateProductActivationAdmin: UpdateProductActivationAdminInputsGQL!\n  ) {\n    updateProductActivationAdmin(\n      updateProductActivationAdmin: $updateProductActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation updateProductActivationAdmin(\n    $updateProductActivationAdmin: UpdateProductActivationAdminInputsGQL!\n  ) {\n    updateProductActivationAdmin(\n      updateProductActivationAdmin: $updateProductActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createProductAdmin(\n    $createProductAdminInputs: CreateProductAdminInputsGQL!\n  ) {\n    createProductAdmin(createProductAdminInputs: $createProductAdminInputs) {\n      slug\n      id\n      name\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      text\n    }\n  }\n"): (typeof documents)["\n  mutation createProductAdmin(\n    $createProductAdminInputs: CreateProductAdminInputsGQL!\n  ) {\n    createProductAdmin(createProductAdminInputs: $createProductAdminInputs) {\n      slug\n      id\n      name\n      createdAt\n      updatedAt\n      deletedAt\n      isActive\n      text\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProjectByIdAdmin($projectId: String!) {\n    getProjectByIdAdmin(projectId: $projectId) {\n      id\n      createdAt\n      name\n      slug\n      isActive\n      description\n      lat\n      long\n      cityId\n      city {\n        id\n        name\n        province {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          filename\n          id\n        }\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProjectByIdAdmin($projectId: String!) {\n    getProjectByIdAdmin(projectId: $projectId) {\n      id\n      createdAt\n      name\n      slug\n      isActive\n      description\n      lat\n      long\n      cityId\n      city {\n        id\n        name\n        province {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          filename\n          id\n        }\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateProjectAdmin(\n    $updateProjectAdminInputs: UpdateProjectAdminInputsGQL!\n  ) {\n    updateProjectAdmin(updateProjectAdminInputs: $updateProjectAdminInputs) {\n      id\n      createdAt\n      name\n      slug\n      isActive\n      description\n      lat\n      long\n      cityId\n      city {\n        id\n        name\n        province {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          filename\n          id\n        }\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateProjectAdmin(\n    $updateProjectAdminInputs: UpdateProjectAdminInputsGQL!\n  ) {\n    updateProjectAdmin(updateProjectAdminInputs: $updateProjectAdminInputs) {\n      id\n      createdAt\n      name\n      slug\n      isActive\n      description\n      lat\n      long\n      cityId\n      city {\n        id\n        name\n        province {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          filename\n          id\n        }\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation addImageToProjectAdmin(\n    $addImageToProjectAdminInputs: AddImageToProjectAdminInputsGQL!\n  ) {\n    addImageToProjectAdmin(\n      addImageToProjectAdminInputs: $addImageToProjectAdminInputs\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation addImageToProjectAdmin(\n    $addImageToProjectAdminInputs: AddImageToProjectAdminInputsGQL!\n  ) {\n    addImageToProjectAdmin(\n      addImageToProjectAdminInputs: $addImageToProjectAdminInputs\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateProjectReviewAdmin(\n    $updateProjectReviewAdminInputs: UpdateProjectReviewAdminInputsGQL!\n  ) {\n    updateProjectReviewAdmin(\n      updateProjectReviewAdminInputs: $updateProjectReviewAdminInputs\n    ) {\n      id\n      createdAt\n      reviewer\n      text\n      projectId\n      isActive\n      project {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateProjectReviewAdmin(\n    $updateProjectReviewAdminInputs: UpdateProjectReviewAdminInputsGQL!\n  ) {\n    updateProjectReviewAdmin(\n      updateProjectReviewAdminInputs: $updateProjectReviewAdminInputs\n    ) {\n      id\n      createdAt\n      reviewer\n      text\n      projectId\n      isActive\n      project {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProjectReviewByIdAdmin($projectReviewId: String!) {\n    getProjectReviewByIdAdmin(projectReviewId: $projectReviewId) {\n      id\n      createdAt\n      reviewer\n      text\n      projectId\n      isActive\n      project {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProjectReviewByIdAdmin($projectReviewId: String!) {\n    getProjectReviewByIdAdmin(projectReviewId: $projectReviewId) {\n      id\n      createdAt\n      reviewer\n      text\n      projectId\n      isActive\n      project {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProjectReviewsAdmin(\n    $getProjectReviewsAdminArgs: GetProjectReviewsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProjectReviewsAdmin(\n      getProjectReviewsAdminArgs: $getProjectReviewsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        reviewer\n        text\n        text\n        projectId\n        project {\n          name\n          id\n        }\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProjectReviewsAdmin(\n    $getProjectReviewsAdminArgs: GetProjectReviewsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProjectReviewsAdmin(\n      getProjectReviewsAdminArgs: $getProjectReviewsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        reviewer\n        text\n        text\n        projectId\n        project {\n          name\n          id\n        }\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation deleteProjectReviewAdmin(\n    $deleteProjectReviewAdmin: DeleteProjectReviewAdminInputsGQL!\n  ) {\n    deleteProjectReviewAdmin(\n      deleteProjectReviewAdminInputs: $deleteProjectReviewAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation deleteProjectReviewAdmin(\n    $deleteProjectReviewAdmin: DeleteProjectReviewAdminInputsGQL!\n  ) {\n    deleteProjectReviewAdmin(\n      deleteProjectReviewAdminInputs: $deleteProjectReviewAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createProjectReviewAdmin(\n    $createProjectReviewAdminInputs: CreateProjectReviewAdminInputsGQL!\n  ) {\n    createProjectReviewAdmin(\n      createProjectReviewAdminInputs: $createProjectReviewAdminInputs\n    ) {\n      id\n      createdAt\n      reviewer\n      text\n      project {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createProjectReviewAdmin(\n    $createProjectReviewAdminInputs: CreateProjectReviewAdminInputsGQL!\n  ) {\n    createProjectReviewAdmin(\n      createProjectReviewAdminInputs: $createProjectReviewAdminInputs\n    ) {\n      id\n      createdAt\n      reviewer\n      text\n      project {\n        name\n        id\n      }\n      fileUses {\n        id\n        file {\n          id\n          filename\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProjectsAdmin(\n    $getProjectsAdminArgs: GetProjectsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProjectsAdmin(\n      getProjectsAdminArgs: $getProjectsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        name\n        slug\n        isActive\n        description\n        lat\n        long\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n        fileUses {\n          file {\n            filename\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProjectsAdmin(\n    $getProjectsAdminArgs: GetProjectsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProjectsAdmin(\n      getProjectsAdminArgs: $getProjectsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        name\n        slug\n        isActive\n        description\n        lat\n        long\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n        fileUses {\n          file {\n            filename\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateProjectActivationAdmin(\n    $updateProjectActivationAdmin: UpdateProjectActivationAdminInputsGQL!\n  ) {\n    updateProjectActivationAdmin(\n      updateProjectActivationAdminInputs: $updateProjectActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation updateProjectActivationAdmin(\n    $updateProjectActivationAdmin: UpdateProjectActivationAdminInputsGQL!\n  ) {\n    updateProjectActivationAdmin(\n      updateProjectActivationAdminInputs: $updateProjectActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createProjectAdmin(\n    $createProjectAdminInputs: CreateProjectAdminInputsGQL!\n  ) {\n    createProjectAdmin(createProjectAdminInputs: $createProjectAdminInputs) {\n      id\n      createdAt\n      name\n      slug\n      isActive\n      description\n      lat\n      long\n      cityId\n      city {\n        id\n        name\n        province {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          filename\n          id\n        }\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createProjectAdmin(\n    $createProjectAdminInputs: CreateProjectAdminInputsGQL!\n  ) {\n    createProjectAdmin(createProjectAdminInputs: $createProjectAdminInputs) {\n      id\n      createdAt\n      name\n      slug\n      isActive\n      description\n      lat\n      long\n      cityId\n      city {\n        id\n        name\n        province {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          filename\n          id\n        }\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getPropertiesAdmin(\n    $getPropertiesAdminArgs: GetPropertiesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getPropertiesAdmin(\n      getPropertiesAdminArgs: $getPropertiesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        name\n        unit\n        isActive\n      }\n    }\n  }\n"): (typeof documents)["\n  query getPropertiesAdmin(\n    $getPropertiesAdminArgs: GetPropertiesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getPropertiesAdmin(\n      getPropertiesAdminArgs: $getPropertiesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        name\n        unit\n        isActive\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updatePropertyActivationAdmin(\n    $updatePropertyActivationAdminInputs: UpdatePropertyActivationAdminInputsGQL!\n  ) {\n    updatePropertyActivationAdmin(\n      updatePropertyActivationAdminInputs: $updatePropertyActivationAdminInputs\n    ) {\n      id\n      name\n      unit\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation updatePropertyActivationAdmin(\n    $updatePropertyActivationAdminInputs: UpdatePropertyActivationAdminInputsGQL!\n  ) {\n    updatePropertyActivationAdmin(\n      updatePropertyActivationAdminInputs: $updatePropertyActivationAdminInputs\n    ) {\n      id\n      name\n      unit\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createPropertyAdmin(\n    $createPropertyAdminInputs: CreatePropertyAdminInputsGQL!\n  ) {\n    createPropertyAdmin(createPropertyAdminInputs: $createPropertyAdminInputs) {\n      id\n      name\n      unit\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation createPropertyAdmin(\n    $createPropertyAdminInputs: CreatePropertyAdminInputsGQL!\n  ) {\n    createPropertyAdmin(createPropertyAdminInputs: $createPropertyAdminInputs) {\n      id\n      name\n      unit\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updatePropertyAdmin(\n    $updatePropertyAdminInputs: UpdatePropertyAdminInputsGQL!\n  ) {\n    updatePropertyAdmin(updatePropertyAdminInputs: $updatePropertyAdminInputs) {\n      id\n      name\n      unit\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation updatePropertyAdmin(\n    $updatePropertyAdminInputs: UpdatePropertyAdminInputsGQL!\n  ) {\n    updatePropertyAdmin(updatePropertyAdminInputs: $updatePropertyAdminInputs) {\n      id\n      name\n      unit\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getPropertyByIdAdmin($propertyId: String!) {\n    getPropertyByIdAdmin(propertyId: $propertyId) {\n      id\n      name\n      unit\n      isActive\n    }\n  }\n"): (typeof documents)["\n  query getPropertyByIdAdmin($propertyId: String!) {\n    getPropertyByIdAdmin(propertyId: $propertyId) {\n      id\n      name\n      unit\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProvincesAdmin(\n    $getProvincesAdminArgs: GetProvincesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProvincesAdmin(\n      getProvincesAdminArgs: $getProvincesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProvincesAdmin(\n    $getProvincesAdminArgs: GetProvincesAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProvincesAdmin(\n      getProvincesAdminArgs: $getProvincesAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createProvinceAdmin(\n    $createProvinceAdminInputs: CreateProvinceAdminInputsGQL!\n  ) {\n    createProvinceAdmin(createProvinceAdminInputs: $createProvinceAdminInputs) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation createProvinceAdmin(\n    $createProvinceAdminInputs: CreateProvinceAdminInputsGQL!\n  ) {\n    createProvinceAdmin(createProvinceAdminInputs: $createProvinceAdminInputs) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateProvinceAdmin(\n    $updateProvinceAdminInputs: UpdateProvinceAdminInputsGQL!\n  ) {\n    updateProvinceAdmin(updateProvinceAdminInputs: $updateProvinceAdminInputs) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation updateProvinceAdmin(\n    $updateProvinceAdminInputs: UpdateProvinceAdminInputsGQL!\n  ) {\n    updateProvinceAdmin(updateProvinceAdminInputs: $updateProvinceAdminInputs) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProvinceByIdAdmin($provinceId: String!) {\n    getProvinceByIdAdmin(provinceId: $provinceId) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query getProvinceByIdAdmin($provinceId: String!) {\n    getProvinceByIdAdmin(provinceId: $provinceId) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getTransporterAgentsAdmin(\n    $getTransporterAgentsAdminArgs: GetTransporterAgentsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getTransporterAgentsAdmin(\n      getTransporterAgentsAdminArgs: $getTransporterAgentsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        firstName\n        lastName\n        email\n        phone\n        description\n        isActive\n        transporter {\n          id\n          name\n          phone\n          email\n          cityId\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getTransporterAgentsAdmin(\n    $getTransporterAgentsAdminArgs: GetTransporterAgentsAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getTransporterAgentsAdmin(\n      getTransporterAgentsAdminArgs: $getTransporterAgentsAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        firstName\n        lastName\n        email\n        phone\n        description\n        isActive\n        transporter {\n          id\n          name\n          phone\n          email\n          cityId\n          city {\n            id\n            name\n            province {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateTransporterAgentActivationAdmin(\n    $updateTransporterAgentActivationAdmin: UpdateTransporterAgentActivationAdminInputsGQL!\n  ) {\n    updateTransporterAgentActivationAdmin(\n      updateTransporterAgentActivationAdminInputs: $updateTransporterAgentActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation updateTransporterAgentActivationAdmin(\n    $updateTransporterAgentActivationAdmin: UpdateTransporterAgentActivationAdminInputsGQL!\n  ) {\n    updateTransporterAgentActivationAdmin(\n      updateTransporterAgentActivationAdminInputs: $updateTransporterAgentActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createTransporterAgentAdmin(\n    $createTransporterAgentAdminInputs: CreateTransporterAgentAdminInputsGQL!\n  ) {\n    createTransporterAgentAdmin(\n      createTransporterAgentAdminInputs: $createTransporterAgentAdminInputs\n    ) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      transporter {\n        id\n        name\n        phone\n        email\n\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createTransporterAgentAdmin(\n    $createTransporterAgentAdminInputs: CreateTransporterAgentAdminInputsGQL!\n  ) {\n    createTransporterAgentAdmin(\n      createTransporterAgentAdminInputs: $createTransporterAgentAdminInputs\n    ) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      transporter {\n        id\n        name\n        phone\n        email\n\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateTransporterAgentAdmin(\n    $updateTransporterAgentAdminInputs: UpdateTransporterAgentAdminInputsGQL!\n  ) {\n    updateTransporterAgentAdmin(\n      updateTransporterAgentAdminInputs: $updateTransporterAgentAdminInputs\n    ) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      transporter {\n        id\n        name\n        phone\n        email\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateTransporterAgentAdmin(\n    $updateTransporterAgentAdminInputs: UpdateTransporterAgentAdminInputsGQL!\n  ) {\n    updateTransporterAgentAdmin(\n      updateTransporterAgentAdminInputs: $updateTransporterAgentAdminInputs\n    ) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      transporter {\n        id\n        name\n        phone\n        email\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getTransporterAgentByIdAdmin($transporterAgentId: String!) {\n    getTransporterAgentByIdAdmin(transporterAgentId: $transporterAgentId) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      transporter {\n        id\n        name\n        phone\n        email\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getTransporterAgentByIdAdmin($transporterAgentId: String!) {\n    getTransporterAgentByIdAdmin(transporterAgentId: $transporterAgentId) {\n      id\n      createdAt\n      firstName\n      lastName\n      email\n      phone\n      description\n      isActive\n      transporter {\n        id\n        name\n        phone\n        email\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getTransportersAdmin(\n    $getTransportersAdminArgs: GetTransportersAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getTransportersAdmin(\n      getTransportersAdminArgs: $getTransportersAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        email\n        name\n        description\n        address\n        phone\n        isActive\n        cityId\n        city {\n          id\n          name\n          province {\n            name\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getTransportersAdmin(\n    $getTransportersAdminArgs: GetTransportersAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getTransportersAdmin(\n      getTransportersAdminArgs: $getTransportersAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        email\n        name\n        description\n        address\n        phone\n        isActive\n        cityId\n        city {\n          id\n          name\n          province {\n            name\n            id\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateTransporterActivationAdmin(\n    $updateTransporterActivationAdmin: UpdateTransporterActivationAdminInputsGQL!\n  ) {\n    updateTransporterActivationAdmin(\n      updateTransporterActivationAdminInputs: $updateTransporterActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation updateTransporterActivationAdmin(\n    $updateTransporterActivationAdmin: UpdateTransporterActivationAdminInputsGQL!\n  ) {\n    updateTransporterActivationAdmin(\n      updateTransporterActivationAdminInputs: $updateTransporterActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createTransporterAdmin(\n    $createTransporterAdminInputs: CreateTransporterAdminInputsGQL!\n  ) {\n    createTransporterAdmin(\n      createTransporterAdminInputs: $createTransporterAdminInputs\n    ) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createTransporterAdmin(\n    $createTransporterAdminInputs: CreateTransporterAdminInputsGQL!\n  ) {\n    createTransporterAdmin(\n      createTransporterAdminInputs: $createTransporterAdminInputs\n    ) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateTransporterAdmin(\n    $updateTransporterAdminInputs: UpdateTransporterAdminInputsGQL!\n  ) {\n    updateTransporterAdmin(\n      updateTransporterAdminInputs: $updateTransporterAdminInputs\n    ) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateTransporterAdmin(\n    $updateTransporterAdminInputs: UpdateTransporterAdminInputsGQL!\n  ) {\n    updateTransporterAdmin(\n      updateTransporterAdminInputs: $updateTransporterAdminInputs\n    ) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getTransporterByIdAdmin($transporterId: String!) {\n    getTransporterByIdAdmin(transporterId: $transporterId) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getTransporterByIdAdmin($transporterId: String!) {\n    getTransporterByIdAdmin(transporterId: $transporterId) {\n      id\n      name\n      phone\n      email\n      description\n      address\n      isActive\n      cityId\n      city {\n        id\n        name\n        province {\n          name\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateUserAdmin($updateUserAdminInputs: UpdateUserAdminInputsGQL!) {\n    updateUserAdmin(updateUserAdminInputs: $updateUserAdminInputs) {\n      id\n      createdAt\n      username\n      firstName\n      lastName\n      email\n      phone\n      roles\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserAdmin($updateUserAdminInputs: UpdateUserAdminInputsGQL!) {\n    updateUserAdmin(updateUserAdminInputs: $updateUserAdminInputs) {\n      id\n      createdAt\n      username\n      firstName\n      lastName\n      email\n      phone\n      roles\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateUserProvincesAdmin(\n    $updateUserProvincesAdminInputs: UpdateUserProvincesAdminInputsGQL!\n  ) {\n    updateUserProvincesAdmin(\n      updateUserProvincesAdminInputs: $updateUserProvincesAdminInputs\n    ) {\n      id\n      provinceUsers {\n        id\n        provinceId\n        province {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserProvincesAdmin(\n    $updateUserProvincesAdminInputs: UpdateUserProvincesAdminInputsGQL!\n  ) {\n    updateUserProvincesAdmin(\n      updateUserProvincesAdminInputs: $updateUserProvincesAdminInputs\n    ) {\n      id\n      provinceUsers {\n        id\n        provinceId\n        province {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getUserByIdAdmin($userId: String!) {\n    getUserByIdAdmin(userId: $userId) {\n      id\n      createdAt\n      updatedAt\n      username\n      firstName\n      lastName\n      email\n      phone\n      roles\n      isActive\n\n      provinceUsers {\n        id\n        provinceId\n        province {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getUserByIdAdmin($userId: String!) {\n    getUserByIdAdmin(userId: $userId) {\n      id\n      createdAt\n      updatedAt\n      username\n      firstName\n      lastName\n      email\n      phone\n      roles\n      isActive\n\n      provinceUsers {\n        id\n        provinceId\n        province {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getUsersAdmin(\n    $getUsersAdminArgs: GetUsersAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getUsersAdmin(\n      getUsersAdminArgs: $getUsersAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        updatedAt\n        deletedAt\n        username\n        firstName\n        lastName\n        email\n        phone\n        roles\n        isActive\n      }\n    }\n  }\n"): (typeof documents)["\n  query getUsersAdmin(\n    $getUsersAdminArgs: GetUsersAdminArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getUsersAdmin(\n      getUsersAdminArgs: $getUsersAdminArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        updatedAt\n        deletedAt\n        username\n        firstName\n        lastName\n        email\n        phone\n        roles\n        isActive\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateUserActivationAdmin(\n    $updateUserActivationAdmin: UpdateUserActivationAdminInputsGQL!\n  ) {\n    updateUserActivationAdmin(\n      updateUserActivationAdmin: $updateUserActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserActivationAdmin(\n    $updateUserActivationAdmin: UpdateUserActivationAdminInputsGQL!\n  ) {\n    updateUserActivationAdmin(\n      updateUserActivationAdmin: $updateUserActivationAdmin\n    ) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createUserAdmin($createUserAdminInputs: CreateUserAdminInputsGQL!) {\n    createUserAdmin(createUserAdminInputs: $createUserAdminInputs) {\n      id\n      createdAt\n      username\n      firstName\n      lastName\n      email\n      phone\n      roles\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation createUserAdmin($createUserAdminInputs: CreateUserAdminInputsGQL!) {\n    createUserAdmin(createUserAdminInputs: $createUserAdminInputs) {\n      id\n      createdAt\n      username\n      firstName\n      lastName\n      email\n      phone\n      roles\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query loginAdmin($loginAdminInputs: LoginAdminInputsGQL!) {\n    loginAdmin(loginAdminInputs: $loginAdminInputs) {\n      id\n      lastName\n      firstName\n      createdAt\n      roles\n      username\n    }\n  }\n"): (typeof documents)["\n  query loginAdmin($loginAdminInputs: LoginAdminInputsGQL!) {\n    loginAdmin(loginAdminInputs: $loginAdminInputs) {\n      id\n      lastName\n      firstName\n      createdAt\n      roles\n      username\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query meAdmin {\n    meAdmin {\n      id\n      lastName\n      firstName\n      createdAt\n      roles\n      username\n    }\n  }\n"): (typeof documents)["\n  query meAdmin {\n    meAdmin {\n      id\n      lastName\n      firstName\n      createdAt\n      roles\n      username\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;