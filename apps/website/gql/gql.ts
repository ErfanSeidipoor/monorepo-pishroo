/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n  query getUsersPublic(\n    $getUsersPublicArgs: GetUsersPublicArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getUsersPublic(\n      getUsersPublicArgs: $getUsersPublicArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        lastName\n        firstName\n        phone\n        email\n        phone\n\n        fileUses {\n          file {\n            filename\n            id\n          }\n          id\n        }\n\n        provinceUsers {\n          id\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetUsersPublicDocument,
    "\n  query getCategoriesPublicHomePage(\n    $getCategoriesPublicArgs: GetCategoriesPublicArgsGQL!\n  ) {\n    getCategoriesPublic(\n      getCategoriesPublicArgs: $getCategoriesPublicArgs\n      paginationArgs: { limit: 30 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n": types.GetCategoriesPublicHomePageDocument,
    "\n  query getProductsPublicProductPage(\n    $getProductsPublicArgs: GetProductsPublicArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProductsPublic(\n      getProductsPublicArgs: $getProductsPublicArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        slug\n        id\n        name\n        isActive\n        createdAt\n        updatedAt\n        deletedAt\n        fileUses {\n          id\n          status\n          type\n          isPublic\n          file {\n            filename\n            size\n            id\n          }\n        }\n      }\n    }\n  }\n": types.GetProductsPublicProductPageDocument,
    "\n  query getCategoriesPublicProductPage(\n    $getCategoriesPublicArgs: GetCategoriesPublicArgsGQL!\n  ) {\n    getCategoriesPublic(\n      getCategoriesPublicArgs: $getCategoriesPublicArgs\n      paginationArgs: { limit: 30 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n": types.GetCategoriesPublicProductPageDocument,
    "\n  query getProductByIdPublicProductPage($identity: String!) {\n    getProductByIdPublic(identity: $identity) {\n      id\n      name\n      slug\n      isActive\n      text\n\n      productReviews {\n        id\n        reviewer\n        text\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n\n      productProperties {\n        id\n        value\n        property {\n          name\n          unit\n        }\n      }\n      productColors {\n        id\n        colorId\n        color {\n          id\n          value\n          name\n        }\n      }\n      productCategories {\n        id\n        categoryId\n        category {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          id\n          filename\n          path\n        }\n      }\n    }\n  }\n": types.GetProductByIdPublicProductPageDocument,
    "\n  query getProjectsPublicProductPage(\n    $getProjectsPublicArgs: GetProjectsPublicArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProjectsPublic(\n      getProjectsPublicArgs: $getProjectsPublicArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        name\n        slug\n        isActive\n        lat\n        long\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n        fileUses {\n          file {\n            filename\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n": types.GetProjectsPublicProductPageDocument,
    "\n  query getProjectByIdPublicProjectPage($identity: String!) {\n    getProjectByIdPublic(identity: $identity) {\n      id\n      createdAt\n      name\n      slug\n      isActive\n      description\n      lat\n      long\n      cityId\n      projectReviews {\n        id\n        text\n        reviewer\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n      city {\n        id\n        name\n        province {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          filename\n          id\n        }\n        id\n      }\n    }\n  }\n": types.GetProjectByIdPublicProjectPageDocument,
    "\n  query getProductsPublicSearchbox(\n    $getProductsPublicArgs: GetProductsPublicArgsGQL!\n  ) {\n    getProductsPublic(\n      getProductsPublicArgs: $getProductsPublicArgs\n      paginationArgs: { limit: 3000, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        slug\n        text\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n": types.GetProductsPublicSearchboxDocument,
    "\n  query getProjectsPublicSearchbox(\n    $getProjectsPublicArgs: GetProjectsPublicArgsGQL!\n  ) {\n    getProjectsPublic(\n      getProjectsPublicArgs: $getProjectsPublicArgs\n      paginationArgs: { limit: 3000, page: 1 }\n    ) {\n      edges {\n        id\n        createdAt\n        name\n        slug\n        isActive\n        description\n        lat\n        long\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n        fileUses {\n          file {\n            filename\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n": types.GetProjectsPublicSearchboxDocument,
    "\n  query getProductsPublicSimilarProducts(\n    $getProductsPublicArgs: GetProductsPublicArgsGQL!\n  ) {\n    getProductsPublic(\n      getProductsPublicArgs: $getProductsPublicArgs\n      paginationArgs: { limit: 30 }\n    ) {\n      edges {\n        id\n        name\n        slug\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n": types.GetProductsPublicSimilarProductsDocument,
    "\n  query getProjectsPublicSimilarProjects(\n    $getProjectsPublicArgs: GetProjectsPublicArgsGQL!\n  ) {\n    getProjectsPublic(\n      getProjectsPublicArgs: $getProjectsPublicArgs\n      paginationArgs: { limit: 30 }\n    ) {\n      edges {\n        id\n        name\n        slug\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n": types.GetProjectsPublicSimilarProjectsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getUsersPublic(\n    $getUsersPublicArgs: GetUsersPublicArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getUsersPublic(\n      getUsersPublicArgs: $getUsersPublicArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        lastName\n        firstName\n        phone\n        email\n        phone\n\n        fileUses {\n          file {\n            filename\n            id\n          }\n          id\n        }\n\n        provinceUsers {\n          id\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getUsersPublic(\n    $getUsersPublicArgs: GetUsersPublicArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getUsersPublic(\n      getUsersPublicArgs: $getUsersPublicArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        lastName\n        firstName\n        phone\n        email\n        phone\n\n        fileUses {\n          file {\n            filename\n            id\n          }\n          id\n        }\n\n        provinceUsers {\n          id\n          province {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCategoriesPublicHomePage(\n    $getCategoriesPublicArgs: GetCategoriesPublicArgsGQL!\n  ) {\n    getCategoriesPublic(\n      getCategoriesPublicArgs: $getCategoriesPublicArgs\n      paginationArgs: { limit: 30 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCategoriesPublicHomePage(\n    $getCategoriesPublicArgs: GetCategoriesPublicArgsGQL!\n  ) {\n    getCategoriesPublic(\n      getCategoriesPublicArgs: $getCategoriesPublicArgs\n      paginationArgs: { limit: 30 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductsPublicProductPage(\n    $getProductsPublicArgs: GetProductsPublicArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProductsPublic(\n      getProductsPublicArgs: $getProductsPublicArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        slug\n        id\n        name\n        isActive\n        createdAt\n        updatedAt\n        deletedAt\n        fileUses {\n          id\n          status\n          type\n          isPublic\n          file {\n            filename\n            size\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProductsPublicProductPage(\n    $getProductsPublicArgs: GetProductsPublicArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProductsPublic(\n      getProductsPublicArgs: $getProductsPublicArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        slug\n        id\n        name\n        isActive\n        createdAt\n        updatedAt\n        deletedAt\n        fileUses {\n          id\n          status\n          type\n          isPublic\n          file {\n            filename\n            size\n            id\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCategoriesPublicProductPage(\n    $getCategoriesPublicArgs: GetCategoriesPublicArgsGQL!\n  ) {\n    getCategoriesPublic(\n      getCategoriesPublicArgs: $getCategoriesPublicArgs\n      paginationArgs: { limit: 30 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCategoriesPublicProductPage(\n    $getCategoriesPublicArgs: GetCategoriesPublicArgsGQL!\n  ) {\n    getCategoriesPublic(\n      getCategoriesPublicArgs: $getCategoriesPublicArgs\n      paginationArgs: { limit: 30 }\n    ) {\n      edges {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductByIdPublicProductPage($identity: String!) {\n    getProductByIdPublic(identity: $identity) {\n      id\n      name\n      slug\n      isActive\n      text\n\n      productReviews {\n        id\n        reviewer\n        text\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n\n      productProperties {\n        id\n        value\n        property {\n          name\n          unit\n        }\n      }\n      productColors {\n        id\n        colorId\n        color {\n          id\n          value\n          name\n        }\n      }\n      productCategories {\n        id\n        categoryId\n        category {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          id\n          filename\n          path\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProductByIdPublicProductPage($identity: String!) {\n    getProductByIdPublic(identity: $identity) {\n      id\n      name\n      slug\n      isActive\n      text\n\n      productReviews {\n        id\n        reviewer\n        text\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n\n      productProperties {\n        id\n        value\n        property {\n          name\n          unit\n        }\n      }\n      productColors {\n        id\n        colorId\n        color {\n          id\n          value\n          name\n        }\n      }\n      productCategories {\n        id\n        categoryId\n        category {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          id\n          filename\n          path\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProjectsPublicProductPage(\n    $getProjectsPublicArgs: GetProjectsPublicArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProjectsPublic(\n      getProjectsPublicArgs: $getProjectsPublicArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        name\n        slug\n        isActive\n        lat\n        long\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n        fileUses {\n          file {\n            filename\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProjectsPublicProductPage(\n    $getProjectsPublicArgs: GetProjectsPublicArgsGQL!\n    $paginationArgs: PaginationArgsGQL!\n  ) {\n    getProjectsPublic(\n      getProjectsPublicArgs: $getProjectsPublicArgs\n      paginationArgs: $paginationArgs\n    ) {\n      pageInfo {\n        totalEdges\n        edgeCount\n        edgesPerPage\n        currentPage\n        totalPages\n      }\n      edges {\n        id\n        createdAt\n        name\n        slug\n        isActive\n        lat\n        long\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n        fileUses {\n          file {\n            filename\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProjectByIdPublicProjectPage($identity: String!) {\n    getProjectByIdPublic(identity: $identity) {\n      id\n      createdAt\n      name\n      slug\n      isActive\n      description\n      lat\n      long\n      cityId\n      projectReviews {\n        id\n        text\n        reviewer\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n      city {\n        id\n        name\n        province {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          filename\n          id\n        }\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProjectByIdPublicProjectPage($identity: String!) {\n    getProjectByIdPublic(identity: $identity) {\n      id\n      createdAt\n      name\n      slug\n      isActive\n      description\n      lat\n      long\n      cityId\n      projectReviews {\n        id\n        text\n        reviewer\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n      city {\n        id\n        name\n        province {\n          id\n          name\n        }\n      }\n      fileUses {\n        file {\n          filename\n          id\n        }\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductsPublicSearchbox(\n    $getProductsPublicArgs: GetProductsPublicArgsGQL!\n  ) {\n    getProductsPublic(\n      getProductsPublicArgs: $getProductsPublicArgs\n      paginationArgs: { limit: 3000, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        slug\n        text\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProductsPublicSearchbox(\n    $getProductsPublicArgs: GetProductsPublicArgsGQL!\n  ) {\n    getProductsPublic(\n      getProductsPublicArgs: $getProductsPublicArgs\n      paginationArgs: { limit: 3000, page: 1 }\n    ) {\n      edges {\n        id\n        name\n        slug\n        text\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProjectsPublicSearchbox(\n    $getProjectsPublicArgs: GetProjectsPublicArgsGQL!\n  ) {\n    getProjectsPublic(\n      getProjectsPublicArgs: $getProjectsPublicArgs\n      paginationArgs: { limit: 3000, page: 1 }\n    ) {\n      edges {\n        id\n        createdAt\n        name\n        slug\n        isActive\n        description\n        lat\n        long\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n        fileUses {\n          file {\n            filename\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProjectsPublicSearchbox(\n    $getProjectsPublicArgs: GetProjectsPublicArgsGQL!\n  ) {\n    getProjectsPublic(\n      getProjectsPublicArgs: $getProjectsPublicArgs\n      paginationArgs: { limit: 3000, page: 1 }\n    ) {\n      edges {\n        id\n        createdAt\n        name\n        slug\n        isActive\n        description\n        lat\n        long\n        cityId\n        city {\n          id\n          name\n          province {\n            id\n            name\n          }\n        }\n        fileUses {\n          file {\n            filename\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProductsPublicSimilarProducts(\n    $getProductsPublicArgs: GetProductsPublicArgsGQL!\n  ) {\n    getProductsPublic(\n      getProductsPublicArgs: $getProductsPublicArgs\n      paginationArgs: { limit: 30 }\n    ) {\n      edges {\n        id\n        name\n        slug\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProductsPublicSimilarProducts(\n    $getProductsPublicArgs: GetProductsPublicArgsGQL!\n  ) {\n    getProductsPublic(\n      getProductsPublicArgs: $getProductsPublicArgs\n      paginationArgs: { limit: 30 }\n    ) {\n      edges {\n        id\n        name\n        slug\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProjectsPublicSimilarProjects(\n    $getProjectsPublicArgs: GetProjectsPublicArgsGQL!\n  ) {\n    getProjectsPublic(\n      getProjectsPublicArgs: $getProjectsPublicArgs\n      paginationArgs: { limit: 30 }\n    ) {\n      edges {\n        id\n        name\n        slug\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProjectsPublicSimilarProjects(\n    $getProjectsPublicArgs: GetProjectsPublicArgsGQL!\n  ) {\n    getProjectsPublic(\n      getProjectsPublicArgs: $getProjectsPublicArgs\n      paginationArgs: { limit: 30 }\n    ) {\n      edges {\n        id\n        name\n        slug\n        fileUses {\n          id\n          file {\n            id\n            filename\n          }\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;